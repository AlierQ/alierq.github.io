<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS文档流</title>
    <url>/posts/1ec30961.html</url>
    <content><![CDATA[<h2 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h2><p>文档流是指HTML页面中的元素排布（流动）的方向</p>
<h3 id="流动方向"><a href="#流动方向" class="headerlink" title="流动方向"></a>流动方向</h3><ul>
<li>inline元素：从左到右，到达最右边才会换行</li>
<li>block元素：从上到下，每一个元素都占据单独的一行</li>
<li>inline-block元素：从左到右</li>
</ul>
<h3 id="宽度"><a href="#宽度" class="headerlink" title="宽度"></a>宽度</h3><ul>
<li>inline元素：宽度为内部inline元素的和，不能用<span class="label label-info">width</span>指定</li>
<li>block元素：默认自动计算宽度，可以使用<span class="label label-info">width</span>指定</li>
<li>inline-block元素：结合两者特点，可以使用<span class="label label-info">width</span>指定</li>
</ul>
<p class="note note-warning">
TIP：如果元素设置宽度后，文本内容超出，可以通过`word-wrap`设置文本换行
</p>

<h3 id="高度"><a href="#高度" class="headerlink" title="高度"></a>高度</h3><ul>
<li>inline元素：高度由<span class="label label-info">line-height</span>简介确定，跟<span class="label label-info">height</span>无关</li>
<li>block元素：高度由内部文档流元素决定，可以设置<span class="label label-info">height</span></li>
<li>inline-block元素：同上述的block类似，可以设置<span class="label label-info">height</span></li>
</ul>
<p class="note note-warning">
有以下几点需要注意：</br>
    1、不要在inline元素中放block元素</br>
    2、不要写width:100%</br>
    3、当高度小于内部文档流元素时称为溢出，可使用`overflow`解决</br>
    4、block元素没有内容高度为0，inline元素没有内容高度也不为0
</p>

<h3 id="脱离文档流"><a href="#脱离文档流" class="headerlink" title="脱离文档流"></a>脱离文档流</h3><ul>
<li>浮动：<span class="label label-info">float</span></li>
<li>定位：<span class="label label-info">position:absolute &#x2F; fixed</span></li>
</ul>
]]></content>
      <tags>
        <tag>Css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS盒模型</title>
    <url>/posts/94a1bb4e.html</url>
    <content><![CDATA[<h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202206062244801.png" alt="盒模型示意图"></p>
<p>如上图所示盒模型由三个部分组成：</p>
<ul>
<li>内边距：<span class="label label-info">Padding</span></li>
<li>边框：<span class="label label-info">Border</span></li>
<li>外边距：<span class="label label-info">Margin</span></li>
</ul>
<h3 id="边框（Border）"><a href="#边框（Border）" class="headerlink" title="边框（Border）"></a>边框（Border）</h3><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 边框宽度 || 边框样式 || 边框颜色 */</span><br><span class="hljs-attribute">border</span>:border-width || border-style || border-color<br></code></pre></td></tr></table></figure>
<p>边框样式属性值如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">none</span> <span class="hljs-comment">/* 没有边框样式 */</span><br><br>solid <span class="hljs-comment">/* 边框样式为单实线 */</span><br><br>dashed <span class="hljs-comment">/* 边框样式为虚线 */</span><br><br>dotted <span class="hljs-comment">/* 边框样式为点线 */</span><br><br>double <span class="hljs-comment">/* 边框样式为双实线 */</span><br></code></pre></td></tr></table></figure>
<p>简写形式如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;  <span class="hljs-comment">/* 宽度、颜色、样式 */</span><br></code></pre></td></tr></table></figure>
<h4 id="特殊边框"><a href="#特殊边框" class="headerlink" title="特殊边框"></a>特殊边框</h4><p>表格边框：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">table</span>&#123;<br>	<span class="hljs-attribute">border-collapse</span>:collapse;  <span class="hljs-comment">/* 合并表格边框 */</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>圆角边框：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">bordre-radius: 左上 右上 右下 左下;<br><span class="hljs-comment">/* 从左上角顺时针分配指 */</span><br><br><span class="hljs-attribute">border-radius</span>:<span class="hljs-number">50%</span><br><span class="hljs-comment">/* 画圆 */</span><br><br>border-radius:<span class="hljs-number">10px</span> <span class="hljs-number">40px</span>;<br><span class="hljs-comment">/* 使用两个值的时候默认第一个设置主对角线，第二个设置副对角线 */</span><br><br><span class="hljs-attribute">border-radius</span>:<span class="hljs-number">10px</span> <span class="hljs-number">20px</span> <span class="hljs-number">30px</span><br><span class="hljs-comment">/* 使用三个值的时候,第一个参数和第三个参数为左上和右下，第二个参数设置副对角线 */</span><br></code></pre></td></tr></table></figure>
<h3 id="内边距（Padding）"><a href="#内边距（Padding）" class="headerlink" title="内边距（Padding）"></a>内边距（Padding）</h3><p>内容距离边框的距离称为内边距</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">padding-left</span>:<span class="hljs-number">10px</span>;<br><span class="hljs-attribute">padding-right</span>:<span class="hljs-number">20px</span>;<br><span class="hljs-attribute">padding-top</span>:<span class="hljs-number">30px</span>;<br><span class="hljs-attribute">padding-bottom</span>:<span class="hljs-number">40px</span>;<br><span class="hljs-comment">/* 设置上下左右四个方向的内边距 */</span><br></code></pre></td></tr></table></figure>
<p>简写形式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">padding</span>:<span class="hljs-number">20px</span>;<br><span class="hljs-comment">/* 表示上下左右内边距都是20px的距离 */</span><br><br><span class="hljs-attribute">padding</span>:<span class="hljs-number">20px</span> <span class="hljs-number">30px</span>;<br><span class="hljs-comment">/* 上下是20px 左右是30px的内边距 */</span><br><br><span class="hljs-attribute">padding</span>:<span class="hljs-number">10px</span> <span class="hljs-number">20px</span> <span class="hljs-number">50px</span>;<br><span class="hljs-comment">/* 上内边距时10px 左右内边距是20px 下内边距是50px */</span><br><br><span class="hljs-attribute">padding</span>:<span class="hljs-number">10px</span> <span class="hljs-number">20px</span> <span class="hljs-number">30px</span> <span class="hljs-number">40px</span>;  <br><span class="hljs-comment">/* 顺时针的，上右下左 */</span><br></code></pre></td></tr></table></figure>
<h3 id="外边距（Margin）"><a href="#外边距（Margin）" class="headerlink" title="外边距（Margin）"></a>外边距（Margin）</h3><p>边框之外到其他元素的距离称为外边</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">margin-top</span>:<span class="hljs-number">10px</span>;<br><span class="hljs-attribute">margin-right</span>:<span class="hljs-number">20px</span>;<br><span class="hljs-attribute">margin-left</span>:<span class="hljs-number">30px</span>;<br><span class="hljs-attribute">margin-bottom</span>:<span class="hljs-number">40px</span>;<br><span class="hljs-comment">/* 分别设置上右下左的外边距 */</span><br><span class="hljs-comment">/* 外边距简写方式与内边距相同 */</span><br></code></pre></td></tr></table></figure>
<h4 id="外边距实现左右居中"><a href="#外边距实现左右居中" class="headerlink" title="外边距实现左右居中"></a>外边距实现左右居中</h4><p class="note note-warning">
使用margin实现盒子水平居中，需要满足以下条件：<br>
1、必须block元素<br>
2、盒子必须指定width
</p>
实现方法：
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.div</span>&#123;<br>	<span class="hljs-attribute">width</span>:<span class="hljs-number">960px</span>;<br>	<span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span> auto; <br>	<span class="hljs-comment">/* 更推荐下面的写法,不会影响top和bottom的样式 */</span><br>	<span class="hljs-attribute">margin-left</span>:auto;<br>	<span class="hljs-attribute">margin-right</span>:auto;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="盒模型分类"><a href="#盒模型分类" class="headerlink" title="盒模型分类"></a>盒模型分类</h3><p>盒模型分为内容盒模型和边框盒模型，如图所示：</p>
<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202206062346000.png" alt="内容盒模型和边框盒模型"></p>
<h4 id="内容盒模型（content-box）"><a href="#内容盒模型（content-box）" class="headerlink" title="内容盒模型（content-box）"></a>内容盒模型（content-box）</h4><p>设置内容盒模型：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">box-sizing</span>:content-box; <span class="hljs-comment">/* 默认是内容盒模型 */</span><br></code></pre></td></tr></table></figure>
<p>内容盒模型的width只包含了<span class="label label-info">content</span>的内容<br>实际的盒子宽度 &#x3D; <span class="label label-info">width</span> + <span class="label label-info">border</span> + <span class="label label-info">padding</span></p>
<h4 id="边框盒模型（border-box）"><a href="#边框盒模型（border-box）" class="headerlink" title="边框盒模型（border-box）"></a>边框盒模型（border-box）</h4><p>设置边框盒模型：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">box-sizing</span>:border-box;<br></code></pre></td></tr></table></figure>
<p>内容盒模型的width包含了<span class="label label-info">content</span>、<span class="label label-info">border</span> 、<span class="label label-info">padding</span>的内容<br>实际的盒子宽度 &#x3D; <span class="label label-info">width</span></p>
]]></content>
      <tags>
        <tag>Css</tag>
      </tags>
  </entry>
  <entry>
    <title>Git入门</title>
    <url>/posts/8e7db504.html</url>
    <content><![CDATA[<h2 id="Git指令"><a href="#Git指令" class="headerlink" title="Git指令"></a>Git指令</h2><h3 id="设置Git配置"><a href="#设置Git配置" class="headerlink" title="设置Git配置"></a>设置Git配置</h3><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">git config --global user.name 你的英文名<br>git config --global user.email 你的邮箱<br>git config --global push.default simple<br>git config --global core.quotepath <span class="hljs-literal">false</span><br>git config --global core.editor <span class="hljs-string">&quot;code --wait&quot;</span><br>git config --global core.autocrlf input<br></code></pre></td></tr></table></figure>

<h3 id="查看Git配置"><a href="#查看Git配置" class="headerlink" title="查看Git配置"></a>查看Git配置</h3><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">git config --global --list<br></code></pre></td></tr></table></figure>

<h3 id="常用Git指令"><a href="#常用Git指令" class="headerlink" title="常用Git指令"></a>常用Git指令</h3><p><code>git init</code> ：初始化一个git仓库</p>
<p><code>git add 文件名\路径</code>：提交文件到暂存区</p>
<p><code>git commit -m &quot;提交信息内容&quot;</code> ：将文件提交到仓库中，并注上提交信息</p>
<p><code>git commit -v</code>：能够在编辑器中看到自己当前的修改行数内容</p>
<p><code>git commit -v --amend</code> ：VScode终端提交语句</p>
<p><code>git log</code> ：查看提交记录</p>
<p><code>git reflog</code>：查看历史记录（包括回退的记录）</p>
<p><code>git reset --hard 版本号前6位</code>：回退到指定版本</p>
<p><code>git branch </code>：查看所有分支，以及当前所在分支</p>
<p><code>git branch 分支名</code>：创建一个新分支</p>
<p><code>git checkout 分支名</code>：切换到指定分支</p>
<p><code>git merge 分支名</code>：将另一个分支合并到当前分支</p>
<p><code>git status -sb</code>：用来查看当前哪个文件冲突了</p>
<p><code>git branch -d 分支名</code>：删除合并后的无用的分支</p>
<p><code>git remote -v</code>：显示所有远程仓库</p>
<p><code>git remote add 名称  远程仓库地址</code>：添加一个远程仓库</p>
<p class="note note-warning">当合并分支的时候可能会产生冲突，解决完冲突之后应重新add、commit该文件（此时commit时不带参数）</p>

<p><span style="color:red;"><code>.gitignore文件</code>：配置哪些文件不需要提交</span></p>
<p>常见不用提交目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">node_modules<br>.DS_Store<br>.idea<br>.vscode<br></code></pre></td></tr></table></figure>

<h3 id="远程git仓库"><a href="#远程git仓库" class="headerlink" title="远程git仓库"></a>远程git仓库</h3><h4 id="创建ssh-key"><a href="#创建ssh-key" class="headerlink" title="创建ssh key"></a>创建ssh key</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -b 4096 -C &quot;你的任意邮箱地址&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">-t 表示密钥的类型 ，-b表示密钥的长度，-C 用于识别这个密钥的注释</span><br></code></pre></td></tr></table></figure>

<h4 id="Github配置公钥"><a href="#Github配置公钥" class="headerlink" title="Github配置公钥"></a>Github配置公钥</h4><p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202206132145247.png" alt="git设置公钥"></p>
<h4 id="测试Github连接"><a href="#测试Github连接" class="headerlink" title="测试Github连接"></a>测试Github连接</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">ssh -T git@github.com<br></code></pre></td></tr></table></figure>

<h4 id="上传远程仓库"><a href="#上传远程仓库" class="headerlink" title="上传远程仓库"></a>上传远程仓库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将本地仓库和远程仓库连接起来</span><br>git remote add origin git@github.com:AlierQ/GitTest.git<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将原有的master改名位main,因为github上的主分支名称由master改为了main</span><br>git branch -M main<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">推到远程仓库的main分支</span><br>git push -u origin main<br></code></pre></td></tr></table></figure>

<h4 id="上传其他分支"><a href="#上传其他分支" class="headerlink" title="上传其他分支"></a>上传其他分支</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">方式1</span><br>git checkout 分支名<br>git push -u origin 分支名<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">方式2</span><br>git push origin 本地分支名:远程分支名<br></code></pre></td></tr></table></figure>

<h4 id="获取远程合并本地"><a href="#获取远程合并本地" class="headerlink" title="获取远程合并本地"></a>获取远程合并本地</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将远程的仓库合并到本地</span><br>git pull<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">若有多个仓库名</span><br>git pull 仓库名 远程分支名:本地分支名<br></code></pre></td></tr></table></figure>

<h4 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">从目标地址克隆项目到本地</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">当前目录下新建一个与项目同名的文件夹，将项目放在里面</span><br>git clone git@XXXXXX[目标地址]    <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建一个abc目录，将克隆的项目放在这里</span><br>git clone git@XXXXXX[目标地址] abc <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在当前目录下直接存放项目,(最好是空文件夹)</span><br>git clone git@XXXXXX[目标地址] .<br></code></pre></td></tr></table></figure>

<h3 id="Git高级操作"><a href="#Git高级操作" class="headerlink" title="Git高级操作"></a>Git高级操作</h3><h4 id="bash-alias简化命令"><a href="#bash-alias简化命令" class="headerlink" title="bash alias简化命令"></a>bash alias简化命令</h4><p>1、向&#x2F;.bashrc文件里面写入配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">touch ~/.bashrc<br>echo &#x27;alias ga=&quot;git add&quot;&#x27;&gt;&gt; ~/.bashrc<br>echo &#x27;alias gc=&quot;git commit -v&quot;&#x27;&gt;&gt; ~/.bashrc<br>echo &#x27;alias gl=&quot;git pull&quot;&#x27;&gt;&gt; ~/.bashrc<br>echo &#x27;alias gp=&quot;git push&quot;&#x27;&gt;&gt; ~/.bashrc<br>echo &#x27;alias gco=&quot;git checkout&quot;&#x27;&gt;&gt; ~/.bashrc<br>echo &#x27;alias gst=&quot;git status -sb&quot;&#x27;&gt;&gt; ~/.bashrc<br></code></pre></td></tr></table></figure>

<p>2、加载配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">source ~/.bashrc<br></code></pre></td></tr></table></figure>

<h4 id="美化提交历史记录"><a href="#美化提交历史记录" class="headerlink" title="美化提交历史记录"></a>美化提交历史记录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git rebase -i 版本号<br></code></pre></td></tr></table></figure>

<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202206132145993.png"></p>
<h4 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h4><h5 id="中止"><a href="#中止" class="headerlink" title="中止"></a>中止</h5><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git rebase --abort<br></code></pre></td></tr></table></figure>

<h5 id="继续"><a href="#继续" class="headerlink" title="继续"></a>继续</h5><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git rebase --continue<br></code></pre></td></tr></table></figure>

<h4 id="临时隐藏文件"><a href="#临时隐藏文件" class="headerlink" title="临时隐藏文件"></a>临时隐藏文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">git add后可以使用该命令将文件隐藏</span><br>git stash<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">取消隐藏</span><br>git stash pop<br></code></pre></td></tr></table></figure>

<p class="note note-warning">可以连续使用，pop顺序与放入顺序相反</p>

<h3 id="忽略文件-gitignore"><a href="#忽略文件-gitignore" class="headerlink" title="忽略文件.gitignore"></a>忽略文件.gitignore</h3><p>.gitinore可以配置哪些文件不需要提交</p>
<p>文件编写规则：</p>
<ol>
<li>忽略文件中的空行或以井号（#）开始的行将会被忽略。（注释）</li>
<li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（?）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</li>
<li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li>
<li>如果名称的最前面是一个路径分隔符（&#x2F;），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li>
<li>如果名称的最后面是一个路径分隔符（&#x2F;），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li>
</ol>
<p>例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">注释</span><br><br>*.txt        # 忽略所有 .txt结尾的文件,这样的话上传就不会被选中！<br><br>!lib.txt     # 但lib.txt除外<br><br>/temp        # 仅忽略项目根目录下的temp文件,不包括其它目录subdir/temp<br><br>build/       # 忽略build/目录下的所有文件<br><br>doc/*.txt    # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Dom事件模型和事件机制</title>
    <url>/posts/41c8ebf3.html</url>
    <content><![CDATA[<h2 id="Dom事件模型"><a href="#Dom事件模型" class="headerlink" title="Dom事件模型"></a>Dom事件模型</h2><p>Dom事件模型分为两种：<span class="label label-info">事件冒泡</span>和<span class="label label-info">事件捕获</span>，事件冒泡模型由微软提出，而事件捕获模型由网景提出。</p>
<p>事件冒泡：当一个元素上的事件被触发时，事件<strong>从事件源开始</strong>，<strong>往上冒泡直到页面的根元素</strong>，这一过程被称为事件冒泡（默认方式）</p>
<p>事件捕获：当一个元素上的事件被触发时，事件<strong>从页面的根元素开始</strong>，<strong>往下直到事件目标元素</strong>，这一过程被称为事件捕获	</p>
<p>如图所示：</p>
<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202206031732613.png"></p>
<p class="note note-danger">
注意：如果一个元素上既被添加了事件冒泡的的监听也被添加了事件捕获的监听，则是按照先捕获后冒泡的顺序执行监听的回调函数。
</p>

<h2 id="Dom事件机制"><a href="#Dom事件机制" class="headerlink" title="Dom事件机制"></a>Dom事件机制</h2><h3 id="事件三要素"><a href="#事件三要素" class="headerlink" title="事件三要素"></a>事件三要素</h3><ul>
<li>事件源：事件触发的对象</li>
<li>事件类型：通过何种方式触发，常见有：点击、键盘按下抬起……</li>
<li>事件回调函数：在事件被触发的时候，需要执行的操作</li>
</ul>
<h3 id="事件的执行步骤"><a href="#事件的执行步骤" class="headerlink" title="事件的执行步骤"></a>事件的执行步骤</h3><ol>
<li>获取事件源</li>
<li>绑定事件</li>
<li>添加事件回调函数</li>
</ol>
<h3 id="事件的绑定"><a href="#事件的绑定" class="headerlink" title="事件的绑定"></a>事件的绑定</h3><h4 id="使用addEventListener-绑定"><a href="#使用addEventListener-绑定" class="headerlink" title="使用addEventListener()绑定"></a>使用addEventListener()绑定</h4><p>使用<code>addEventListener()</code>可以对不同元素进行不同事件类型的监听，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">div.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;div被点击了！&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>

<p>默认是监听事件冒泡，如果要监听事件捕获，要在<code>addEventListener()</code>参数中进行设置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">div.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;div被点击了！&#x27;</span>)<br>&#125;,<span class="hljs-literal">true</span>)  <span class="hljs-comment">// true开启事件捕获</span><br></code></pre></td></tr></table></figure>

<h4 id="其他绑定方式"><a href="#其他绑定方式" class="headerlink" title="其他绑定方式"></a>其他绑定方式</h4><h5 id="通过标签的事件属性绑定"><a href="#通过标签的事件属性绑定" class="headerlink" title="通过标签的事件属性绑定"></a>通过标签的事件属性绑定</h5><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;fn()&#123;console.log(event)&#125;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p class="note note-danger">
注意：这种方式绑定的事件，可以通过event获取事件对象，但是不能通过this获取到事件源
</p>

<h5 id="通过Dom对象的事件属性绑定"><a href="#通过Dom对象的事件属性绑定" class="headerlink" title="通过Dom对象的事件属性绑定"></a>通过Dom对象的事件属性绑定</h5><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;按钮&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>);</span><br><span class="language-javascript">    btn.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;通过Dom对象的事件属性绑定&quot;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="事件的阻止"><a href="#事件的阻止" class="headerlink" title="事件的阻止"></a>事件的阻止</h3><h4 id="阻止默认事件"><a href="#阻止默认事件" class="headerlink" title="阻止默认事件"></a>阻止默认事件</h4><p>当一个事件发生时浏览器可能会有些默认的操作，例如：点击a标签会跳转、右键会弹出菜单等等，这时我们可以使用<code>event.preventDefault();</code>阻止事件的默认行为。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">x.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;wheel&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">e</span>)=&gt;</span>&#123;  <span class="hljs-comment">//阻止滚动事件</span><br>    e.<span class="hljs-title function_">preventDefault</span>()<br>&#125;)<br></code></pre></td></tr></table></figure>

<h4 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h4><p>在某些特定的情况下，我们不希望事件持续冒泡到根元素，这个时候可以使用<code>event.stopPropagation()</code>去阻止事件继续冒泡。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">div.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;div3&quot;</span>);<br>    e.<span class="hljs-title function_">stopPropagation</span>(); <span class="hljs-comment">// 阻止事件继续冒泡</span><br>&#125;);<br></code></pre></td></tr></table></figure>

<h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><p>利用事件冒泡或者事件捕获机制，通过给父元素绑定事件，从而实现对所有子元素的事件的管理，无需为每个子元素绑定事件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 因为事件冒泡，所以在点击li标签的时候会触发ul的单击事件</span><br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;ul&quot;</span>).<span class="hljs-property">onclick</span> =   <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">target</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>    <span class="hljs-comment">// e是事件对象</span><br>    <span class="hljs-comment">// e.target是事件对象（用户操作的元素）</span><br>    <span class="hljs-comment">// this是e.currentTarget （绑定监听的元素）</span><br>    <span class="hljs-comment">// 当点击的就是本身时，e.target和this没有区别</span><br>    <span class="hljs-comment">// 但是当点击的不是本身，点击的是子标签，然后通过事件冒泡得到的事件，</span><br>    <span class="hljs-comment">// 这时e.target!=this</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">innerText</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>优点：</p>
<ul>
<li>减少事件的注册，降低内存占用</li>
<li>新增元素时能够动态绑定事件</li>
</ul>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON简述</title>
    <url>/posts/e38660dc.html</url>
    <content><![CDATA[<h2 id="JSON简介"><a href="#JSON简介" class="headerlink" title="JSON简介"></a>JSON简介</h2><p>JSON是一门独立的标记语言，用来展示数据，它易于人阅读和编写。同时也易于机器解析和生成。</p>
<h2 id="JSON支持数据类型"><a href="#JSON支持数据类型" class="headerlink" title="JSON支持数据类型"></a>JSON支持数据类型</h2><ul>
<li>string - 只支持双引号，不支持单引号和无引号</li>
<li>number - 支持科学计数法</li>
<li>bool - true和false</li>
<li>null - 没有undefined</li>
<li>object </li>
<li>array</li>
</ul>
<h2 id="JSON数据的转换"><a href="#JSON数据的转换" class="headerlink" title="JSON数据的转换"></a>JSON数据的转换</h2><h3 id="JSON-parse（反序列化）"><a href="#JSON-parse（反序列化）" class="headerlink" title="JSON.parse（反序列化）"></a>JSON.parse（反序列化）</h3><p>将符合JSON语法的字符串转成JS对应类型的数据</p>
<p>注意：</p>
<ul>
<li>由于JSON只有六种语法，所以转成的数据也只有6种</li>
<li>不符合JSON语法，则直接抛出一个Error对象</li>
<li>一般使用try catch捕获错误</li>
</ul>
<h3 id="JSON-stringify（序列化）"><a href="#JSON-stringify（序列化）" class="headerlink" title="JSON.stringify（序列化）"></a>JSON.stringify（序列化）</h3><p>是JSON.parse的逆运算用于将符合JSON语法的数据类型转成JSON格式</p>
<p>注意</p>
<ul>
<li>因为JS数据类型比JSON多，所以转换不一定都能成功，如果失败就抛出Error对象</li>
</ul>
<p><a href="http://json.org/json-zh.html">JSON中文介绍官网</a></p>
]]></content>
      <tags>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript原生AJAX</title>
    <url>/posts/d0443184.html</url>
    <content><![CDATA[<h2 id="AJAX请求的步骤"><a href="#AJAX请求的步骤" class="headerlink" title="AJAX请求的步骤"></a>AJAX请求的步骤</h2><ol>
<li>创建XMLHttpRequest对象</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> request = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>调用XMLHttpRequest对象建立连接</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">request.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;get&#x27;</span>,<span class="hljs-string">&#x27;/index.html&#x27;</span>)<br></code></pre></td></tr></table></figure>

<ol start="3">
<li><p>监听对象</p>
<ul>
<li>使用onload或者onerror监听</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">request.<span class="hljs-property">onload</span> = <span class="hljs-function">()=&gt;</span>&#123;<br>	<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(request.<span class="hljs-property">response</span>)  <span class="hljs-comment">// 可以获取请求到的内容</span><br>&#125;<br><br>request.<span class="hljs-property">onerror</span> = <span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;请求错误！&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li>使用onreadystatechange监听</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">request.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-function">()=&gt;</span>&#123;<br>	request.<span class="hljs-property">readyState</span> <span class="hljs-comment">// 获取当前XMLHttpRequest对象的状态</span><br>    <br>    request.<span class="hljs-property">status</span> <span class="hljs-comment">// 获取当前请求的状态码</span><br>    <br>    <span class="hljs-comment">// 根据当前request对象的状态和请求的状态码进行相应的处理</span><br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>调用XMLHttpRequest对象的send()方法发送请求</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">request.<span class="hljs-title function_">send</span>() <br></code></pre></td></tr></table></figure>

<h2 id="readyState状态"><a href="#readyState状态" class="headerlink" title="readyState状态"></a>readyState状态</h2><p><strong>XMLHttpRequest.readyState</strong>属性返回的是一个XMLHttpRequest 代理当前所处的状态</p>
<table>
<thead>
<tr>
<th>值</th>
<th>状态</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>UNSENT</td>
<td>代理被创建，但未调用open()方法</td>
</tr>
<tr>
<td>1</td>
<td>OPENED</td>
<td>open()方法已经被调用</td>
</tr>
<tr>
<td>2</td>
<td>HEADERS_RECEIVED</td>
<td>send()方法已经被调用，并且头部状态已经可以获取</td>
</tr>
<tr>
<td>3</td>
<td>LOADING</td>
<td>下载中，responseText属性已经包含部分数据</td>
</tr>
<tr>
<td>4</td>
<td>DONE</td>
<td>下载操作已经完成</td>
</tr>
</tbody></table>
<p class="note note-warning">
通常在的下载完成之后时候使用onreadystatechange方法
</p>

<h2 id="AJAX请求的数据类型及使用方法"><a href="#AJAX请求的数据类型及使用方法" class="headerlink" title="AJAX请求的数据类型及使用方法"></a>AJAX请求的数据类型及使用方法</h2><ul>
<li>CSS：得到之后可以将其放入style标签中</li>
<li>HTML：得到之后使用innerHTML和DOM API加入网页中</li>
<li>JS：得到之后可以将其放入script标签中</li>
<li>XML：得到之后使用responseXML和DOM API获取其中的内容</li>
<li>JSON：得到之后可以使用JSON.parse()将其转化成相应的数据类型</li>
</ul>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>AJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript同步和异步</title>
    <url>/posts/95105818.html</url>
    <content><![CDATA[<h2 id="JavaScript是单线程"><a href="#JavaScript是单线程" class="headerlink" title="JavaScript是单线程"></a>JavaScript是单线程</h2><p>JavaScript在诞生之初是被用作实现用户和浏览器的一些简单的交互，这也就使得了JavaScript在设计的时候就没有考虑他要做一些很复杂的操作，所以JavaScript就被设计成了单线程的一门语言。并在至今为止他都是一门单线程的脚本语言。</p>
<p>所谓的单线程是指JavaScript引擎解释和执行的线程只有一个</p>
<h2 id="同步和异步的概念"><a href="#同步和异步的概念" class="headerlink" title="同步和异步的概念"></a>同步和异步的概念</h2><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>同步的概念：假设我现在手头有两件事要做：切菜和炒菜，我做这两件事情的时候，我必须要先切菜再炒菜，并且一定要等切菜这个任务完成之后才可以开始我炒菜的任务，如果切菜没有完成我就需要一直等待。</p>
<ul>
<li>换成计算机的表达：我需要等A事件执行完了，才能去执行B事件，如果A事件没有执行完，我就一直等待，直到它完成，我再去执行B事件。</li>
</ul>
<p><span class="label label-info">概括</span>：我一定要拿到结果，拿不到我就不走！</p>
<h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>异步的概念：同样的，现在我的手头也有两件事要做：煲饭和炒菜，我做这两件事情的时候，我可以把饭煲上，然后我就去炒菜，我并不需要等待饭煲好了，再去炒菜，什么时候饭煲好了它可以响一下提醒我。</p>
<ul>
<li>换成计算机得表达：我让A事件执行，并且让它做完了之后就提醒我，在他执行的时候我去执行B事件。</li>
</ul>
<p><span class="label label-info">概括</span>：我不一定要拿到结果，我继续走，有结果了通知我一声就行！</p>
<h2 id="JavaScript为什么需要异步任务"><a href="#JavaScript为什么需要异步任务" class="headerlink" title="JavaScript为什么需要异步任务"></a>JavaScript为什么需要异步任务</h2><p>因为JavaScript是单线程的，所以如果现在JavaScript中的一些事件需要长时间的执行，这就会导致后续要执行的事件要进行长时间的等待，极端条件下这种等待是不可控的。所以这个时候就需要引入异步的操作，将这类需要长时间的事件，放到一边去执行，不影响后续的事件。然后在特定的时间或者特定的状态使用一下<span class="label label-info">特殊的手段</span>再去得到之前那些长时间执行的事件的结果。</p>
<h2 id="如何得到异步任务的结果"><a href="#如何得到异步任务的结果" class="headerlink" title="如何得到异步任务的结果"></a>如何得到异步任务的结果</h2><h3 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h3><p>每隔一段时间就询问一下异步任务是否有结果</p>
<h3 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h3><p>当异步任务达到某种状态（完成、错误、超时…..）执行一段代码，由这段代码（回调函数）来得到结果。</p>
<h2 id="常见的异步"><a href="#常见的异步" class="headerlink" title="常见的异步"></a>常见的异步</h2><ul>
<li>AJAX</li>
<li>addEventListener</li>
<li>setTimeout()</li>
<li>待补充…</li>
</ul>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>MVC设计模式</title>
    <url>/posts/7333197b.html</url>
    <content><![CDATA[<h2 id="MVC设计模模式"><a href="#MVC设计模模式" class="headerlink" title="MVC设计模模式"></a>MVC设计模模式</h2><h3 id="什么是设计模式？"><a href="#什么是设计模式？" class="headerlink" title="什么是设计模式？"></a>什么是设计模式？</h3><p>设计模式是软件开发人员在软件开发过程中面临一般问题的解决方案，是一套被反复使用的、多数人知晓的、代码设计的总结。使用设计模式能够使得代码更可靠、更易懂、更高效。</p>
<h3 id="什么是MVC设计模式？"><a href="#什么是MVC设计模式？" class="headerlink" title="什么是MVC设计模式？"></a>什么是MVC设计模式？</h3><p>MVC设计模式为了提高代码的灵活性和复用性，将应用划分为三个部分：</p>
<ol>
<li>Model（模型） 这部分封装了应用程序业务逻辑相关的数据以及他们对应的处理数据的方法，当数据发生改变时模型将会通知数据相关的视图。</li>
</ol>
<p>Model示例：</p>
   <figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Model</span> = &#123;<br>    <span class="hljs-attr">data</span>:&#123;&#125;,     <span class="hljs-comment">// 数据</span><br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;&#125;,     <span class="hljs-comment">// 获取数据</span><br>    <span class="hljs-title function_">save</span>(<span class="hljs-params"></span>)&#123;&#125;,    <span class="hljs-comment">// 保存数据</span><br>    <span class="hljs-title function_">create</span>(<span class="hljs-params"></span>)&#123;&#125;,  <span class="hljs-comment">// 创建数据</span><br>    <span class="hljs-title function_">delete</span>(<span class="hljs-params"></span>)&#123;&#125;,  <span class="hljs-comment">// 删除数据</span><br>    <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>)&#123;&#125;,  <span class="hljs-comment">// 更新数据</span><br>&#125;<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>View（视图） 这部分是界面上的展示，展示的是Model中的数据的状态，当数据发送变化，视图也会随之重新渲染页面。</li>
</ol>
<p>View示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">View</span> = &#123;<br><span class="hljs-attr">container</span>:&#123;&#125;,  <span class="hljs-comment">// 视图的容器</span><br><span class="hljs-attr">element</span>:&#123;&#125;,    <span class="hljs-comment">// 视图的内容</span><br><span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;&#125;,    <span class="hljs-comment">// 渲染视图</span><br>&#125;<br></code></pre></td></tr></table></figure>

<ol start="3">
<li>Controller（控制器）这一部分是负责结合数据和视图这两部分，使之能够相互关联起来。控制器的工作流程：从视图中获取事件或者输入，根据业务逻辑让Model对数据进行处理，然后通知视图进行更新。</li>
</ol>
<p>Controller示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Controller</span> = &#123;<br>    <span class="hljs-attr">events</span>:&#123;&#125;,      <span class="hljs-comment">// 事件元素</span><br>    <span class="hljs-title function_">bindEvent</span>(<span class="hljs-params"></span>)&#123;&#125;,  <span class="hljs-comment">// 绑定事件监听</span><br>    <span class="hljs-title function_">action1</span>(<span class="hljs-params"></span>)&#123;&#125;,    <span class="hljs-comment">// 事件触发回调函数（某些业务逻辑）</span><br>    <span class="hljs-title function_">action2</span>(<span class="hljs-params"></span>)&#123;&#125;,    <span class="hljs-comment">// 事件触发回调函数（某些业务逻辑）</span><br>    <span class="hljs-title function_">action3</span>(<span class="hljs-params"></span>)&#123;&#125;     <span class="hljs-comment">// 事件触发回调函数（某些业务逻辑）</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="表驱动编程"><a href="#表驱动编程" class="headerlink" title="表驱动编程"></a>表驱动编程</h2><p>表驱动编程中的表指的是通过数据结构哈希表来进行挑选，然后执行相应语句，而不是使用许多逻辑语句（if-else、switch等）来进行选择执行，并且随着操作的增多，逻辑链的增多，表编程带来的效率提升会更高</p>
<h3 id="非表编程"><a href="#非表编程" class="headerlink" title="非表编程"></a>非表编程</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">weekday</span>(<span class="hljs-params">day</span>) &#123; <br>    <span class="hljs-keyword">if</span>(day%<span class="hljs-number">7</span>===<span class="hljs-number">0</span>)&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;星期天&#x27;</span>; &#125; <br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(day%<span class="hljs-number">7</span>===<span class="hljs-number">1</span>)&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;星期一&#x27;</span>; &#125; <br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(day%<span class="hljs-number">7</span>===<span class="hljs-number">2</span>)&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;星期二&#x27;</span>; &#125; <br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(day%<span class="hljs-number">7</span>===<span class="hljs-number">3</span>)&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;星期三&#x27;</span>; &#125; <br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(day%<span class="hljs-number">7</span>===<span class="hljs-number">4</span>)&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;星期四&#x27;</span>; &#125; <br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(day%<span class="hljs-number">7</span>===<span class="hljs-number">5</span>)&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;星期五&#x27;</span>; &#125; <br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(day%<span class="hljs-number">7</span>===<span class="hljs-number">6</span>)&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;星期六&#x27;</span>; &#125; <br>&#125; <br></code></pre></td></tr></table></figure>

<h3 id="表编程"><a href="#表编程" class="headerlink" title="表编程"></a>表编程</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">weekday</span>(<span class="hljs-params">day</span>) &#123; <br>    <span class="hljs-keyword">let</span> week = [<span class="hljs-string">&#x27;星期天&#x27;</span>,<span class="hljs-string">&#x27;星期一&#x27;</span>,<span class="hljs-string">&#x27;星期二&#x27;</span>,<span class="hljs-string">&#x27;星期三&#x27;</span>,<span class="hljs-string">&#x27;星期四&#x27;</span>,<span class="hljs-string">&#x27;星期五&#x27;</span>,<span class="hljs-string">&#x27;星期六&#x27;</span>]<br>    <span class="hljs-keyword">return</span> week[day%<span class="hljs-number">7</span>]<br>&#125; <br></code></pre></td></tr></table></figure>

<p>从上面的例子可以看出，通过表编程可以简化一些逻辑操作。所以适当的运用表编程能够提升代码的效率。</p>
]]></content>
      <tags>
        <tag>MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP基本概念</title>
    <url>/posts/3f4e513f.html</url>
    <content><![CDATA[<h2 id="HTTP简介"><a href="#HTTP简介" class="headerlink" title="HTTP简介"></a>HTTP简介</h2><p>HTTP 协议一般指 HTTP（超文本传输协议）是一种用于分布式、协作式和超媒体信息系统的应用层协议，是因特网上应用最为广泛的一种网络传输协议，所有的 WWW 文件都必须遵守这个标准。HTTP 是为 Web 浏览器与 Web 服务器之间的通信而设计的，但也可以用于其他目的。HTTP 是一个基于 TCP&#x2F;IP 通信协议来传递数据的（HTML 文件、图片文件、查询结果等）。</p>
<h3 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h3><p>HTTP请求流程：</p>
<ol>
<li><p>构建请求</p>
<p>浏览器构建请求行信息，准备向服务器发送网络请求</p>
</li>
<li><p>查找缓存</p>
<p>在发起请求之前会在缓存中查询是否有要请求的文件，如果有就拦截请求，返回缓存中的资源，没有则请求服务器</p>
</li>
<li><p>准备IP地址和端口</p>
<p>请求的URL一般会经过DNS转换成IP地址，并且还需要获取对应的端口</p>
</li>
<li><p>等待TCP队列</p>
<p>在准备好IP和端口之后并不一定会马上发送，因为同一个域名同时最多可以支持6个TCP连接，所以可能当前请求会进入队列进行排队等待。</p>
</li>
<li><p>建立TCP连接</p>
<p>进行握手建立服务器连接，在开始通信之前要进行连接的建立</p>
</li>
<li><p>发送HTTP请求</p>
<p>连接建立完成之后，发送HTTP请求进行通信</p>
</li>
</ol>
<h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><ul>
<li><code>请求动词</code>  <code>路径加查询参数</code>  <code>协议名/版本</code>           （请求行）</li>
<li>Host：域名或IP  端口号                                      （请求头）</li>
<li>Accept： text&#x2F;html      （希望接受的数据类型）（请求头）</li>
<li>Content-Type：（发送的实体数据的数据类型）（请求头）</li>
<li>（请求体）</li>
</ul>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul>
<li><p>三部分：请求行、请求头、请求体</p>
</li>
<li><p>请求动词有 GET &#x2F; POST &#x2F; PUT &#x2F; PATCH &#x2F; DELETE 等</p>
</li>
<li><p>请求体在GET请求中一般为空</p>
</li>
</ul>
<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202206132335333.png" alt="HTTP请求图示"></p>
<h3 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h3><p>HTTP响应流程：</p>
<ol>
<li><p>返回请求</p>
<p>服务员一旦完成请求的处理，就可以返回数据给浏览器</p>
</li>
<li><p>断开连接</p>
<p>服务器向客户端返回响应之后，就关闭TCP连接。</p>
</li>
</ol>
<p class="note note-warning">可以在头部信息中加入`Contention:Keep-Alive`让TCP连接保持连接</p>

<h4 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h4><ul>
<li><code>协议名/版本</code>  <code>状态码</code>  <code>状态字符串</code>    （响应行）</li>
<li>Content-Type：响应体的格式            （响应头）</li>
<li>（响应体）（下载内容）</li>
</ul>
<h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h4><ul>
<li><p>三部分：状态行、响应头、响应体</p>
</li>
<li><p>常见的<code>状态码</code>是重点</p>
</li>
</ul>
<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202206132335024.png" alt="HTTP响应图示"></p>
<h3 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h3><p>HTTP状态码能够描述返回的请求结果。借助状态码可以知道服务器是否正确的处理请求</p>
<h4 id="状态码类别"><a href="#状态码类别" class="headerlink" title="状态码类别"></a>状态码类别</h4><table>
<thead>
<tr>
<th>状态码</th>
<th>类别</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>1XX</strong></td>
<td>Informational（信息性状态码）</td>
<td>接收的请求正在处理</td>
</tr>
<tr>
<td><strong>2XX</strong></td>
<td>Success（成功状态码）</td>
<td>请求正常处理完毕</td>
</tr>
<tr>
<td><strong>3XX</strong></td>
<td>Redirection（重定向状态码）</td>
<td>需要进行附加操作以完成请求</td>
</tr>
<tr>
<td><strong>4XX</strong></td>
<td>Client Error（客户端错误状态码）</td>
<td>错误来自客户端</td>
</tr>
<tr>
<td><strong>5XX</strong></td>
<td>Server Error（服务器错误状态码）</td>
<td>错误来自服务器</td>
</tr>
</tbody></table>
<h4 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h4><p><code>2XX</code>：请求被正确处理</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td><strong>200 OK</strong></td>
<td>请求在服务段被正常处理</td>
<td>GET 方法，对应请求资源的实体会作为响应返回；HEAD 方法，不返回</td>
</tr>
<tr>
<td><strong>204 No Content</strong></td>
<td>请求正确处理，但是不返回实体的主体</td>
<td>用于客户端往服务器发送信息，而客户端不用更新</td>
</tr>
<tr>
<td><strong>204 Partial Content</strong></td>
<td>客户端有请求范围，服务器成功执行范围请求</td>
<td>响应报文中包含由 Content-Range 指定范围的实体内容</td>
</tr>
</tbody></table>
<p><code>3XX</code>：浏览器需要执行某些特殊的处理来正确处理请求</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td><strong>301 Moved Permanently</strong></td>
<td>永久性重定向</td>
<td>请求的资源已被分配了新的URI，以后应使用新的 URI</td>
</tr>
<tr>
<td><strong>302 Found</strong></td>
<td>临时性重定向</td>
<td>请求的资源已被分配了新的 URI，本次应使用新的 URI</td>
</tr>
<tr>
<td><strong>303 See Other</strong></td>
<td>临时性重定向</td>
<td>与302有相同的功能，但本次应使用 GET 方法定向获取请求的资源</td>
</tr>
<tr>
<td><strong>304 Not Modified</strong></td>
<td>发送附带请求的请求，资源不满足条件</td>
<td>附带条件：GET 方法的请求报文中包含 If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since 中任一首部</td>
</tr>
<tr>
<td><strong>307 Temporary Redirect</strong></td>
<td>临时性重定向</td>
<td>与302有相同的功能，但307 会遵照浏览器标准，请求方法不会从 POST 变成 GET</td>
</tr>
</tbody></table>
<p><code>4XX</code>：客户端时发送错误的原因所在</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td><strong>400 Bad Request</strong></td>
<td>请求报文中存在语法错误</td>
<td>错误发生时，需修改请求的内容后再次发送请求</td>
</tr>
<tr>
<td><strong>401 Unauthorized</strong></td>
<td>请求需要通过HTTP 认证</td>
<td>浏览器初次接收到 401 响应，会弹出认证用的对话窗口；之前已进行过 1 次请求，则表示用 户认证失败</td>
</tr>
<tr>
<td><strong>403 Forbidden</strong></td>
<td>服务器拒绝请求</td>
<td>服务器端没有必要给出拒绝的详细理由，想说明可以在实体的主体部分描述原因；未授权的访问可能导致403</td>
</tr>
<tr>
<td><strong>404 Not Found</strong></td>
<td>服务器上无法找到请求的资源</td>
<td>可以在服务器端拒绝请求且不想说明理由时使用</td>
</tr>
</tbody></table>
<p><code>5XX</code>：服务器本身发送错误</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td><strong>500 Internal Server Error</strong></td>
<td>服务器执行请求时出错</td>
<td></td>
</tr>
<tr>
<td><strong>503 Service Unavailable</strong></td>
<td>服务器无法处理请求</td>
<td>服务器暂时处于超负载或正在进行停机维护</td>
</tr>
</tbody></table>
<p>更多状态码可以访问<a href="https://http.cat/">HTTP Cat</a></p>
]]></content>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery的设计思想</title>
    <url>/posts/171faadf.html</url>
    <content><![CDATA[<h2 id="jQuery获取元素"><a href="#jQuery获取元素" class="headerlink" title="jQuery获取元素"></a>jQuery获取元素</h2><h3 id="CSS选择器方式"><a href="#CSS选择器方式" class="headerlink" title="CSS选择器方式"></a>CSS选择器方式</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">$(<span class="hljs-variable language_">document</span>) <span class="hljs-comment">// 选取整个文档对象</span><br><br>$(<span class="hljs-string">&#x27;#mydiv&#x27;</span>) <span class="hljs-comment">// 选择id为mydiv的元素</span><br><br>$(<span class="hljs-string">&#x27;.tt&#x27;</span>) <span class="hljs-comment">// 选择class为tt的元素</span><br><br>$(<span class="hljs-string">&#x27;input[name=username]&#x27;</span>) <span class="hljs-comment">// 选择name属性为username的input元素</span><br></code></pre></td></tr></table></figure>

<h3 id="jQuery特有表达式"><a href="#jQuery特有表达式" class="headerlink" title="jQuery特有表达式"></a>jQuery特有表达式</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;a:first&#x27;</span>) <span class="hljs-comment">// 选择页面中第一个a元素</span><br><br>$(<span class="hljs-string">&#x27;tr:odd&#x27;</span>) <span class="hljs-comment">// 选择表格的奇数行</span><br><br>$(<span class="hljs-string">&#x27;#myForm :input&#x27;</span>) <span class="hljs-comment">// 选取id为myForm中的input元素</span><br><br>$(<span class="hljs-string">&#x27;div:visible&#x27;</span>) <span class="hljs-comment">// 选择可见的div元素</span><br><br>$(<span class="hljs-string">&#x27;div:gt(2)&#x27;</span>) <span class="hljs-comment">// 选择所有的div元素，除了前三个（0、1、2）</span><br><br>$(<span class="hljs-string">&#x27;div:animated&#x27;</span>) <span class="hljs-comment">// 选择当前处于动画状态的div元素</span><br></code></pre></td></tr></table></figure>

<h2 id="jQuery的链式操作"><a href="#jQuery的链式操作" class="headerlink" title="jQuery的链式操作"></a>jQuery的链式操作</h2><p>在jQuery中使用了<span class="label label-info">链式操作</span>，就是在你获取网页元素之后，可以连续对他进行一列的操作，并且这一系列的操作可以连续的写在一起，就好像链条一样。</p>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;#mydiv&#x27;</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;span&#x27;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">2</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&#x27;Hello World!&#x27;</span>);<br></code></pre></td></tr></table></figure>

<p>将其分解之后：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;#mydiv&#x27;</span>) <span class="hljs-comment">// 获取到id为mydiv的元素</span><br><br>    .<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;span&#x27;</span>) <span class="hljs-comment">// 在他的内部寻找span标签</span><br><br>    .<span class="hljs-title function_">eq</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// 获取span标签中的第3个(下标从0开始)</span><br><br>    .<span class="hljs-title function_">html</span>(<span class="hljs-string">&#x27;Hello World!&#x27;</span>); <span class="hljs-comment">// 将它的内容改为&#x27;Hello World!&#x27;</span><br></code></pre></td></tr></table></figure>

<p>每一次的jQuery操作，都会返回一个jQuery对象，下一个操作就可以直接在前一个操作的基础之上进行。</p>
<p>此外jQuery还提供了<a href="https://www.jquery123.com/end/">.end()</a>方法，返回上一个操作的对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;#mydiv&#x27;</span>) <span class="hljs-comment">// 获取到id为mydiv的元素</span><br><br>    .<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;span&#x27;</span>) <span class="hljs-comment">// 在他的内部寻找span标签</span><br><br>    .<span class="hljs-title function_">eq</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// 获取span标签中的第3个(下标从0开始)</span><br><br>    .<span class="hljs-title function_">html</span>(<span class="hljs-string">&#x27;Hello World!&#x27;</span>); <span class="hljs-comment">// 将它的内容改为&#x27;Hello World!&#x27;</span><br>	<br>	<span class="hljs-comment">// 此时操作的对象是mydiv下的第3个span元素</span><br><br>	.<span class="hljs-title function_">end</span>() <span class="hljs-comment">// 返回上一个操作对象</span><br><br>	<span class="hljs-comment">// 此时操作的对象是mydiv下的所有span元素</span><br></code></pre></td></tr></table></figure>

<h2 id="jQuery创建元素"><a href="#jQuery创建元素" class="headerlink" title="jQuery创建元素"></a>jQuery创建元素</h2><p>jQuery创建元素只需要把新元素以字符串的形式传入jQuery的构造构造函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;&lt;div&gt;Hello World!&lt;/div&gt;&#x27;</span>)<br><br>$(<span class="hljs-string">&#x27;&lt;li&gt;new li&lt;/li&gt;&#x27;</span>)<br><br><span class="hljs-comment">// 还可以使用append创建之后直接插入</span><br><br>$(<span class="hljs-string">&#x27;ul&#x27;</span>).<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;&lt;li&gt;li&lt;/li&gt;&#x27;</span>)<br></code></pre></td></tr></table></figure>

<h2 id="jQuery移动元素"><a href="#jQuery移动元素" class="headerlink" title="jQuery移动元素"></a>jQuery移动元素</h2><p>jQuery移动元素提供了两种方法：</p>
<p>假定我们想要将div元素放在p元素后面</p>
<p>第一种：直接移动该元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">insertAfter</span>($(<span class="hljs-string">&#x27;p&#x27;</span>))  <span class="hljs-comment">// 将div元素移动到p元素后面</span><br></code></pre></td></tr></table></figure>

<p>第二种：移动其他元素的位置，从而达到目的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;p&#x27;</span>).<span class="hljs-title function_">after</span>($(<span class="hljs-string">&#x27;div&#x27;</span>))  <span class="hljs-comment">// 在p元素的后面加入一个div</span><br></code></pre></td></tr></table></figure>

<p>两者实现的效果是相同的，但是第一种方法返回的对象是div元素，第二种方法返回的是p元素。</p>
<p>这类操作方法，一共有四对：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在现存元素的外部，从后面插入元素</span><br>$(<span class="hljs-string">&#x27;xxx&#x27;</span>).<span class="hljs-title function_">insertAfter</span>()<br>$(<span class="hljs-string">&#x27;xxx&#x27;</span>).<span class="hljs-title function_">after</span>()<br><br><span class="hljs-comment">// 在现存元素的外部，从前面插入元素</span><br>$(<span class="hljs-string">&#x27;xxx&#x27;</span>).<span class="hljs-title function_">insertBefore</span>()<br>$(<span class="hljs-string">&#x27;xxx&#x27;</span>).<span class="hljs-title function_">before</span>()<br><br><span class="hljs-comment">// 在现存元素的内部，从后面插入元素</span><br>$(<span class="hljs-string">&#x27;xxx&#x27;</span>).<span class="hljs-title function_">appendTo</span>()<br>$(<span class="hljs-string">&#x27;xxx&#x27;</span>).<span class="hljs-title function_">append</span>()<br><br><span class="hljs-comment">// 在现存元素的内部，从前面插入元素</span><br>$(<span class="hljs-string">&#x27;xxx&#x27;</span>).<span class="hljs-title function_">prependTo</span>()<br>$(<span class="hljs-string">&#x27;xxx&#x27;</span>).<span class="hljs-title function_">prepend</span>()<br></code></pre></td></tr></table></figure>

<h2 id="jQuery修改元素属性"><a href="#jQuery修改元素属性" class="headerlink" title="jQuery修改元素属性"></a>jQuery修改元素属性</h2><p>jQuery中使用同意个函数进行取值（getter）和赋值（setter），具体是取值还是赋值由函数的参数决定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-property">html</span>; <span class="hljs-comment">// 无参，获取div的值</span><br><br>$(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-property">html</span>; <span class="hljs-comment">// 带参，设置div的值 </span><br></code></pre></td></tr></table></figure>

<p>常用赋值和取值操作如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;xxx&#x27;</span>).<span class="hljs-title function_">html</span>() <span class="hljs-comment">// 取出或设置html内容</span><br><br>$(<span class="hljs-string">&#x27;xxx&#x27;</span>).<span class="hljs-title function_">text</span>() <span class="hljs-comment">// 取出或设置text内容</span><br><br>$(<span class="hljs-string">&#x27;xxx&#x27;</span>).<span class="hljs-title function_">attr</span>() <span class="hljs-comment">// 取出或设置某个属性的值</span><br><br>$(<span class="hljs-string">&#x27;xxx&#x27;</span>).<span class="hljs-title function_">width</span>() <span class="hljs-comment">// 取出或设置某个元素的宽度</span><br><br>$(<span class="hljs-string">&#x27;xxx&#x27;</span>).<span class="hljs-title function_">height</span>() <span class="hljs-comment">// 取出或设置某个元素的高度</span><br><br>$(<span class="hljs-string">&#x27;xxx&#x27;</span>).<span class="hljs-title function_">val</span>() <span class="hljs-comment">// 取出某个表单元素的值</span><br></code></pre></td></tr></table></figure>

<p>有一点需要注意，在<span class="label label-info">$(‘xxx’)</span>获取的值是多个时，在进行赋值的时候，是对所有元素进行赋值；在进行取值的时候，只对第一个元素进行取值（<a href="https://www.jquery123.com/text/">.text()</a>除外，它是取出所有元素text内容）。</p>
]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>NVM安装和使用</title>
    <url>/posts/c2bdb00f.html</url>
    <content><![CDATA[<h2 id="NVM简介"><a href="#NVM简介" class="headerlink" title="NVM简介"></a>NVM简介</h2><p>nvm是一款node的版本管理工具，可以简单操作node版本的安装、卸载以及切换等。在平常的开发中可以通过使用nvm安装多个node版本，并且进行管理，高效且方便。</p>
<h3 id="NVM下载安装"><a href="#NVM下载安装" class="headerlink" title="NVM下载安装"></a>NVM下载安装</h3><p>Github仓库地址：<a href="https://github.com/coreybutler/nvm-windows/releases">nvm-windows</a></p>
<p>1、选择你要安装的对应版本号</p>
<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202206202317709.png"></p>
<p>2、下载你要使用的方式，可以是.exe也可以是免装压缩包，这里演示安装.exe</p>
<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202206202317759.png"></p>
<p>3、下载软件之后，运行软件</p>
<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202206202317601.png"></p>
<p>默认安装到C盘，这样会自动配置环境变量</p>
<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202206202317005.png"></p>
<p>4、安装完成之后进行测试，命令行输入nvm，出现下方信息表示安装完成（版本号不需要一致哈，你安装的什么就是什么）</p>
<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202206202317539.png"></p>
<h3 id="NVM配置镜像源"><a href="#NVM配置镜像源" class="headerlink" title="NVM配置镜像源"></a>NVM配置镜像源</h3><p>配置镜像源之后安装会快很多，下面是淘宝的镜像源</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">node_mirror<span class="hljs-punctuation">:</span> https<span class="hljs-punctuation">:</span><span class="hljs-comment">//npm.taobao.org/mirrors/node/</span><br>npm_mirror<span class="hljs-punctuation">:</span> https<span class="hljs-punctuation">:</span><span class="hljs-comment">//npm.taobao.org/mirrors/npm/</span><br></code></pre></td></tr></table></figure>

<p>将上方的命令添加到<strong>settings.txt</strong>文件的末尾</p>
<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202206202320284.png"></p>
<h3 id="NVM常用命令"><a href="#NVM常用命令" class="headerlink" title="NVM常用命令"></a>NVM常用命令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">nvm list // 查看安装的所有node的版本<br><br>nvm list available // 查看当前可安装的版本<br><br>nvm install xx.xx.xx  // 安装xx.xx.xx版本的node<br><br>nvm use xx.xx.xx // 使用（切换到）xx.xx.xx版本的node<br><br>nvm uninstall xx.xx.xx  // 卸载xx.xx.xx版本的node<br><br>nvm <span class="hljs-built_in">arch</span> // 显示node是运行在32位还是64位。<br><br>nvm on // 开启node.js版本管理<br><br>nvm off // 关闭node.js版本管理<br><br>nvm proxy [url] // 设置下载代理。不加可选参数url，显示当前代理。将url设置为none则移除代理。<br><br>nvm node_mirror [url] // 设置node镜像。默认是https://nodejs.org/dist/。如果不写url，则使用默认url。设置后可至安装目录settings.txt文件查看，也可直接在该文件操作。<br>nvm npm_mirror [url] // 设置npm镜像。https://github.com/npm/cli/archive/。如果不写url，则使用默认url。设置后可至安装目录settings.txt文件查看，也可直接在该文件操作。<br><br>nvm root [path] // 设置存储不同版本node的目录。如果未设置，默认使用当前目录。<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>NVM</tag>
      </tags>
  </entry>
  <entry>
    <title>cURL常见用法</title>
    <url>/posts/b403a33b.html</url>
    <content><![CDATA[<h2 id="cURL简介"><a href="#cURL简介" class="headerlink" title="cURL简介"></a>cURL简介</h2><p>cURL是一款常用的命令行工具，可以用来请求Web服务器，也可以用于传输数据。支持的协议包括 （DICT, FILE, FTP, FTPS, GOPHER, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMTP, SMTPS, TELNET and TFTP），cURL设计为无用户交互下完成工作；cURL提供了一大堆非常有用的功能包括：代理访问、用户认证、FTP上传下载、HTTP请求、SSL连接、Cookie支持、断点续传等等</p>
<h2 id="cURL常用命令"><a href="#cURL常用命令" class="headerlink" title="cURL常用命令"></a>cURL常用命令</h2><h3 id="发送GET请求"><a href="#发送GET请求" class="headerlink" title="发送GET请求"></a>发送GET请求</h3><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 不带参数</span><br>curl https://www.example.com<br><br><span class="hljs-comment"># 带参数</span><br>curl https://www.example.com?<span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;123123123&#x27;</span><br></code></pre></td></tr></table></figure>

<h3 id="发送POST请求"><a href="#发送POST请求" class="headerlink" title="发送POST请求"></a>发送POST请求</h3><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">curl -X POST -d <span class="hljs-string">&#x27;id=123&amp;tage=a&#x27;</span> https://www.example.com<br><br>curl -X POST -d <span class="hljs-string">&#x27;id=123&#x27;</span> -d <span class="hljs-string">&#x27;tage=a&#x27;</span> https://www.example.com<br></code></pre></td></tr></table></figure>

<p class="note note-info">
    -X：表示指定请求的方法<br>
    -d：POST请求的数据体
</p>

<h3 id="发送JSON格式的请求"><a href="#发送JSON格式的请求" class="headerlink" title="发送JSON格式的请求"></a>发送JSON格式的请求</h3><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">curl -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> -X POST -d <span class="hljs-string">&#x27;&#123;&quot;abc&quot;:123&#125;&#x27;</span> https://www.example.com<br></code></pre></td></tr></table></figure>

<p class="note note-info">
    -H：设置请求头<br>
</p>

<h3 id="更多操作"><a href="#更多操作" class="headerlink" title="更多操作"></a>更多操作</h3><h4 id="（-v）显示通信过程"><a href="#（-v）显示通信过程" class="headerlink" title="（-v）显示通信过程"></a>（-v）显示通信过程</h4><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">curl -v https://www.example.com<br></code></pre></td></tr></table></figure>

<h4 id="（-i）只显示响应头和网站代码"><a href="#（-i）只显示响应头和网站代码" class="headerlink" title="（-i）只显示响应头和网站代码"></a>（-i）只显示响应头和网站代码</h4><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">curl -i https://www.example.com<br></code></pre></td></tr></table></figure>

<h4 id="（-l）只显示网站代码"><a href="#（-l）只显示网站代码" class="headerlink" title="（-l）只显示网站代码"></a>（-l）只显示网站代码</h4><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">curl -l https://www.example.com<br></code></pre></td></tr></table></figure>

<h4 id="（-0）保存网页"><a href="#（-0）保存网页" class="headerlink" title="（-0）保存网页"></a>（-0）保存网页</h4><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">curl -0 https://www.example.com<br></code></pre></td></tr></table></figure>

<h4 id="（-s）不显示错误信息"><a href="#（-s）不显示错误信息" class="headerlink" title="（-s）不显示错误信息"></a>（-s）不显示错误信息</h4><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">curl -s https://www.example.com<br></code></pre></td></tr></table></figure>

<h4 id="（-S）只显示错误信息"><a href="#（-S）只显示错误信息" class="headerlink" title="（-S）只显示错误信息"></a>（-S）只显示错误信息</h4><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">curl -S https://www.example.com<br></code></pre></td></tr></table></figure>

<h4 id="（-c）将cookie写入文件"><a href="#（-c）将cookie写入文件" class="headerlink" title="（-c）将cookie写入文件"></a>（-c）将cookie写入文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl -c cookies.txt https://www.example.com<br></code></pre></td></tr></table></figure>

<h4 id="（-b）发送cookie数据"><a href="#（-b）发送cookie数据" class="headerlink" title="（-b）发送cookie数据"></a>（-b）发送cookie数据</h4><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">curl -b <span class="hljs-string">&#x27;foo=bar&#x27;</span> https://www.example.com<br><br><span class="hljs-comment"># 多个cookie</span><br>curl -b <span class="hljs-string">&#x27;foo1=bar;foo2=bar2&#x27;</span> https://www.example.com<br><br><span class="hljs-comment"># cookie文件</span><br>curl -b cookies.txt https://www.example.com<br></code></pre></td></tr></table></figure>

<h4 id="（-F）上传二进制文件"><a href="#（-F）上传二进制文件" class="headerlink" title="（-F）上传二进制文件"></a>（-F）上传二进制文件</h4><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 默认加上`Content-Type: multipart/form-data`，资源名称指定为file</span><br>curl -F <span class="hljs-string">&#x27;file=@ss.png&#x27;</span> https://www.example.com<br><br><span class="hljs-comment"># 指定MIME类型</span><br>curl -F <span class="hljs-string">&#x27;file=@ss.png;type=image/png&#x27;</span> https://www.example.com<br><br><span class="hljs-comment"># 指定文件名  上传的是ss.png  服务器接收到的是aa.png</span><br>curl -F <span class="hljs-string">&#x27;file=@ss.png;filename=aa.png&#x27;</span> https://www.example.com <br></code></pre></td></tr></table></figure>

<p>更多cURL用法请见<a href="https://www.ruanyifeng.com/blog/2019/09/curl-reference.html">cURL用法指南</a></p>
]]></content>
      <tags>
        <tag>cURL</tag>
      </tags>
  </entry>
  <entry>
    <title>Parcel安装和使用</title>
    <url>/posts/dd5d5baf.html</url>
    <content><![CDATA[<h2 id="Parcel简介"><a href="#Parcel简介" class="headerlink" title="Parcel简介"></a>Parcel简介</h2><p>Parcel是一款无需额外配置的打包工具，可以做到安装之后直接使用。得益于Parcel内部使用多线程打包，所以在相同项目中parcel的打包速度会快很多。</p>
<h2 id="Parcel安装"><a href="#Parcel安装" class="headerlink" title="Parcel安装"></a>Parcel安装</h2><h3 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h3><p>初始化项目</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">yarn init -y<br></code></pre></td></tr></table></figure>
<p>全局安装Parcel</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">yarn global add parcel-bundler<br></code></pre></td></tr></table></figure>
<p>局部安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">yarn add parcel-bundler<br></code></pre></td></tr></table></figure>
<h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><p>初始化项目</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">npm init -y<br></code></pre></td></tr></table></figure>
<p>全局安装Parcel</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">npm install -g parcel-bundler<br></code></pre></td></tr></table></figure>
<p>局部安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">npm install parcel-bundler<br></code></pre></td></tr></table></figure>
<h2 id="Parcel的使用"><a href="#Parcel的使用" class="headerlink" title="Parcel的使用"></a>Parcel的使用</h2><p>假设项目文件目录如下</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">├── index.html<br>├── package.json<br>└── src<br>    └── main.js<br></code></pre></td></tr></table></figure>
<p class="note note-warning">Parcel的打包需要指定一个入口文件，通常是HTML文件</p>

<h3 id="开发模式打包"><a href="#开发模式打包" class="headerlink" title="开发模式打包"></a>开发模式打包</h3><p>开发模式打包下，Parcel会自动将应用构建在它内置的开发服务器中，你可使用浏览器进行访问，默认访问地址是：<a href="http://localhose:1234/">http://localhose:1234</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">parcel index.html<br></code></pre></td></tr></table></figure>
<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202206191551190.png" alt="示例"></p>
<p>打包完成之后会在当前目录下自动生成dist目录</p>
<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202206191553645.png" alt="dist目录"></p>
<h3 id="生产模式打包"><a href="#生产模式打包" class="headerlink" title="生产模式打包"></a>生产模式打包</h3><p>完成项目开发之后，项目进行打包，不再需要运行在Parcel内置服务器中</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">parcel build index.html<br></code></pre></td></tr></table></figure>

<p class="note note-warning">
这里有一点需要注意，直接使用上面的命令打包出来的所有资源的路径都是`/xxxx.js`，这可能会导致资源无法正常请求到，所以建议使用下面的指令，设置为当前路径</p>

<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">parcel build index.html --public-url .<br></code></pre></td></tr></table></figure>

<p>如果你期望打包时不进行代码压缩：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">parcel build index.html --no-minify --public-url .<br></code></pre></td></tr></table></figure>

<h2 id="配置脚本"><a href="#配置脚本" class="headerlink" title="配置脚本"></a>配置脚本</h2><p>你可以通过配置<span class="label label-info">package.json</span>添加任务脚本来帮助你开发&amp;生产</p>
<p><strong>package.json</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;parcel index.html&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;parcel build index.html&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>

<p>此时你就可以使用yarn或者npm运行他们了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 以开发模式运行</span><br>yarn dev<br><br>npm run dev<br><br><span class="hljs-comment"># 以生成模式运行</span><br>yarn build<br><br>npm run build<br></code></pre></td></tr></table></figure>

<p>更多资源类型解析打包、Parcel配置等知识请求移步到<a href="https://www.parceljs.cn/javascript.html">Parcel中文官网</a>或者<a href="https://parceljs.org/docs/">Parcel官网</a></p>
]]></content>
      <tags>
        <tag>Parcel</tag>
      </tags>
  </entry>
  <entry>
    <title>常见手写JS代码</title>
    <url>/posts/7c6ee642.html</url>
    <content><![CDATA[<h2 id="常见手写JS代码"><a href="#常见手写JS代码" class="headerlink" title="常见手写JS代码"></a>常见手写JS代码</h2><p>本文用于收集整理以及学习常见的JS代码，内容来自互联网，不便整理出处，若内容有所侵犯权益，请在底部留言，我会尽快回复。</p>
<h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p>防抖是指用户在触发某个操作时，如果在指定的时间内再次触发该操作，则清除前面的所触发的操作，直到用户在规定时间内不再进行操作，我们再处理用户触发的操作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 防抖</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">fn,delay</span>)&#123;<br>    <span class="hljs-keyword">let</span> timer<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>)&#123;<br>        <span class="hljs-comment">// 再次触发，清除之前的定时器</span><br>        <span class="hljs-keyword">if</span>(timer)&#123;<br>            <span class="hljs-built_in">clearTimeout</span>(timer)<br>        &#125;<br>        <span class="hljs-comment">// 设置新的定时器，重新计时</span><br>        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-comment">// 调用真正的回调函数，并传入this和参数</span><br>            fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>,args)<br>        &#125;,delay)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>命令行常用操作</title>
    <url>/posts/bf840e6a.html</url>
    <content><![CDATA[<h3 id="文件查看操作"><a href="#文件查看操作" class="headerlink" title="文件查看操作"></a>文件查看操作</h3><h4 id="查看文件路径"><a href="#查看文件路径" class="headerlink" title="查看文件路径"></a>查看文件路径</h4><p><code>pwd</code>：查看当前目录的绝对路径</p>
<p><code>ls</code>：查看当前目录内容</p>
<p><code>ls 路径</code>：查看指定目录内容</p>
<h4 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h4><p><code>cat 路径</code>  ：会显示文件的所有内容</p>
<p><code>head 路径</code>：只显示文件的前10行     </p>
<p>​		<code>-n 行数</code>：控制查看行数</p>
<p><code>tail 路径</code>：只显示文件的后10行</p>
<p>​		<code>-n 行数</code>：控制查看行数</p>
<p><code>less 路径</code>：进入一个可以滚动的界面 （q键退出）</p>
<h3 id="文件增加操作"><a href="#文件增加操作" class="headerlink" title="文件增加操作"></a>文件增加操作</h3><p><code>touch 文件名</code>：创建空文件</p>
<p><code>echo 内容</code>：打印内容</p>
<p><code>echo 内容 &gt; 文件名</code>：将内容放在文件中（文件存在会覆盖文件原有的内容，文件不存在会新建文件然后放入内容）</p>
<p><code>echo 内容 &gt;&gt; 文件名</code>：将内容追加在文件中</p>
<p><code>echo  -e &quot;内容(可包含转义字符)&quot;  &gt;&gt; 文件名</code> ：追加文本中使用转义字符（双引号不能少）</p>
<p><code>mkdir 文件夹名称1 文件夹名称2</code>：新建文件夹，多个文件夹用空格隔开</p>
<p><code>mkdir -p a/b/c/d/e</code>：创建多层目录（若有多个用空格隔开）</p>
<p><code>cp 1.txt  2.txt</code> ：将文件1拷贝成文件2</p>
<p><code>cp -r a b</code>：将a目录复制成b目录</p>
<h3 id="文件删除操作"><a href="#文件删除操作" class="headerlink" title="文件删除操作"></a>文件删除操作</h3><p><code>rm 1.txt</code>：删除文件 1.txt</p>
<p><code>rm -r a</code>：删除文件目录a</p>
<p>​		<code>-f</code>：强制执行</p>
<h3 id="文件修改操作"><a href="#文件修改操作" class="headerlink" title="文件修改操作"></a>文件修改操作</h3><p><code>code 文件名</code>：使用默认编辑器打开这个文件进行编辑</p>
<p><code>start 文件名</code>：使用对应默认的软件打开</p>
<p><code>echo 内容 &gt;&gt; 文件名</code>：向文件中追加内容</p>
<p><code>echo &#39;&#39; &gt; 1.txt</code>：清空文件内容（使用echo添加一个空字符串）</p>
<p><code>mv 1.txt a</code>：将1.txt放入a目录中</p>
<p><code>mv b/1.txt .</code>：将b文件夹中的1.txt放入当前目录中</p>
<p><code>mv 1.txt 2.txt</code>：将1.txt重命名为2.txt</p>
<p><code>touch  1.txt</code> ：更新文件修改时间为当前时间</p>
<h3 id="脚本文件"><a href="#脚本文件" class="headerlink" title="脚本文件"></a>脚本文件</h3><p><code>a命令内容  &amp;&amp;  b命令内容</code>：a命令内容执行成功之后执行b命令内容</p>
<p><code>a命令内容; b命令内容</code>：a命令内容执行之后执行b命令内容（a命令不一定需要成功）</p>
<h4 id="创建一个脚本"><a href="#创建一个脚本" class="headerlink" title="创建一个脚本"></a>创建一个脚本</h4><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/usr/bin/env sh</span><br><span class="hljs-built_in">mkdir</span> x<br><span class="hljs-built_in">cd</span> x<br><span class="hljs-built_in">touch</span> index.html<br><span class="hljs-built_in">touch</span> style.css<br><span class="hljs-built_in">touch</span> main.js<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;追加\n内容&quot;</span> &gt;&gt; index.html<br></code></pre></td></tr></table></figure>

<h4 id="添加可执行权限"><a href="#添加可执行权限" class="headerlink" title="添加可执行权限"></a>添加可执行权限</h4><p>windos可以不用，但是在mac和linux下要做</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chmod</span> +x 脚本文件名<br></code></pre></td></tr></table></figure>

<h4 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h4><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">./脚本文件名<br>or<br>sh 脚本文件名<br></code></pre></td></tr></table></figure>

<p>注意：要加.&#x2F;否则不知道脚本文件的位置</p>
<h4 id="可接受参数脚本"><a href="#可接受参数脚本" class="headerlink" title="可接受参数脚本"></a>可接受参数脚本</h4><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/usr/bin/env sh</span><br><span class="hljs-built_in">mkdir</span> <span class="hljs-variable">$1</span><br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$1</span><br><span class="hljs-built_in">touch</span> index.html<br><span class="hljs-built_in">touch</span> style.css<br><span class="hljs-built_in">touch</span> main.js<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;追加\n内容&quot;</span> &gt;&gt; index.html<br></code></pre></td></tr></table></figure>

<p><code>$1</code>表示接收到的第一个参数</p>
]]></content>
      <tags>
        <tag>Git</tag>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title>手写简易EventBus</title>
    <url>/posts/79a4f5c.html</url>
    <content><![CDATA[<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202206191623469.png"></p>
<h2 id="EventBus简介"><a href="#EventBus简介" class="headerlink" title="EventBus简介"></a>EventBus简介</h2><p>在之前的文章中，介绍了MVC设计模式，他将一个应用程序分成了多个模块，弱化了每一个模块与模块之间的联系，这样的就使得模块与模块之间的通信变得尤为重要，尤其是MVC中Model的改变引起View的改变。EventBus就是基于<code>订阅/发布</code>模式实现的实现的异步分发处理系统。</p>
<h3 id="订阅者发布者模式"><a href="#订阅者发布者模式" class="headerlink" title="订阅者发布者模式"></a>订阅者发布者模式</h3><p>举一个生活中的例子，我订阅了一份报纸，这份报纸会在某天的某一时刻出现在我的邮箱中，我不确定它什么时候来，我也不需要一直等待，我只需要在它到来的时候阅读即可，它什么时候会到来呢，这取决于发布者，他何时发布，我何时就能够收到我的报纸。</p>
<p>我阅读了发布者的报纸，这就视为了我与发布者的一次通信，并且这种通信是异步的</p>
<h2 id="JS实现简易的EventBus"><a href="#JS实现简易的EventBus" class="headerlink" title="JS实现简易的EventBus"></a>JS实现简易的EventBus</h2><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">EventBus</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 存储订阅的事件以及回调</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">eventHash</span> = &#123;&#125;<br>    &#125;<br>    <span class="hljs-comment">// 事件订阅</span><br>    <span class="hljs-title function_">on</span>(<span class="hljs-params">eventName,callback</span>)&#123;<br>        <span class="hljs-comment">// 已经订阅过的插入新回调</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">eventHash</span>.<span class="hljs-title function_">hasOwnProperty</span>(eventName))&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">eventHash</span>[eventName].<span class="hljs-title function_">push</span>(callback)<br>        &#125;<span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">// 未订阅的创建新订阅</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">eventHash</span>[eventName] = [callback]<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 事件发布</span><br>    <span class="hljs-title function_">emit</span>(<span class="hljs-params">eventName,data</span>)&#123;<br>        <span class="hljs-comment">// 事件订阅存在则发布</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">eventHash</span>.<span class="hljs-title function_">hasOwnProperty</span>(eventName))&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">eventHash</span>[eventName].<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">callback</span>)=&gt;</span>&#123;<br>                <span class="hljs-title function_">callback</span>(data)<br>            &#125;)<br>        &#125;<span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">// 事件订阅不存在</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`&#x27;<span class="hljs-subst">$&#123;eventName&#125;</span>&#x27; Not Subscribed`</span>)<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 事件取消</span><br>    <span class="hljs-title function_">off</span>(<span class="hljs-params">eventName</span>)&#123;<br>        <span class="hljs-comment">// 不传参数清空所有事件订阅</span><br>        <span class="hljs-keyword">if</span>(eventName === <span class="hljs-literal">undefined</span>)&#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">eventHash</span> = &#123;&#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// 删除对应事件订阅</span><br>            <span class="hljs-keyword">delete</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">eventHash</span>[eventName]<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">EventBus</span>;<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>EventBus</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析跨域问题</title>
    <url>/posts/721439c2.html</url>
    <content><![CDATA[<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><h3 id="源的概念"><a href="#源的概念" class="headerlink" title="源的概念"></a>源的概念</h3><p>window.origin或location.origin就可以得到当前源</p>
<p>源 &#x3D; 协议 + 域名 + 端口号</p>
<h3 id="同源的概念"><a href="#同源的概念" class="headerlink" title="同源的概念"></a>同源的概念</h3><p>如果两个url的协议、域名、端口号都完全一致，则这两个url就是同源的</p>
<p>例如：</p>
<p><a href="https://qq/.com">https://qq/.com</a> 和 <a href="https://www.baidu.com/">https://www.baidu.com</a> 不同源</p>
<p><a href="https://baidu.com/">https://baidu.com</a> 和 <a href="https://www.baidu.com/">https://www.baidu.com</a> 不同源</p>
<p>注意：只有完全一致才能算是同源</p>
<h3 id="同源策源的概念"><a href="#同源策源的概念" class="headerlink" title="同源策源的概念"></a>同源策源的概念</h3><p>浏览器如果JavaScript运行在源A中就只允许获取源A的数据，而不能够源B中的数据，即不允许跨域</p>
<p>同源策略的目的为了保护用户的隐私</p>
<h2 id="跨域请求示例"><a href="#跨域请求示例" class="headerlink" title="跨域请求示例"></a>跨域请求示例</h2><p>我现在在本地9999端口的网页发送一个请求去请求本地8888端口的资源，代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> request = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br><br>request.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;get&#x27;</span>,<span class="hljs-string">&#x27;http://localhost:8888/friends.json&#x27;</span>)<br><br>request.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-keyword">if</span>(request.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span> &amp;&amp; request.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>)&#123;<br>    <span class="hljs-keyword">let</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>    <span class="hljs-keyword">let</span> friends = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(request.<span class="hljs-property">response</span>);<br>    friends.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">let</span> li = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<br>        li.<span class="hljs-property">textContent</span> = item.<span class="hljs-property">name</span>;<br>        ul.<span class="hljs-title function_">appendChild</span>(li);<br>    &#125;)<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(ul);<br>  &#125;<br>&#125;<br><br>request.<span class="hljs-title function_">send</span>();<br></code></pre></td></tr></table></figure>

<p>浏览器就会发出下面的错误信息，提示你进行了跨域请求并且已经被浏览器进行阻止。</p>
<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202206110109578.png" alt="浏览器提示跨域错误"></p>
<h2 id="跨域解决方式"><a href="#跨域解决方式" class="headerlink" title="跨域解决方式"></a>跨域解决方式</h2><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>CORS（Cross-Origin Resource Sharing）跨域资源共享，是一种基于 HTTP 头的机制，该机制通过允许服务器标示除了它自己以外的其它origin（域、协议和端口），这样其他网站可以直接请求该网站的这些资源。</p>
<p>使用方法：</p>
<p>在被请求网站的响应头中进行添加</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">...<br>Access-Control-Allow-Origin: http:<span class="hljs-regexp">//</span>xxx.xxxx.xxx    <span class="hljs-regexp">//</span>指定网址访问<br><br>or<br><br>Access-Control-Allow-Origin: *   <span class="hljs-regexp">//</span> 所有均可访问<br>...<br></code></pre></td></tr></table></figure>

<p>更多请见-&gt;<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82">MDN CORS文档</a></p>
<h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>JSONP是当浏览器不支持CORS（比如IE浏览器）时使用的一种跨域方式</p>
<h5 id="JSONP的实现"><a href="#JSONP的实现" class="headerlink" title="JSONP的实现"></a>JSONP的实现</h5><p>在请求网站中引入被请求网站的js代码，代码中cd是指定的回调函数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://localhost:8888/jsonp/friends.js?callback=callback&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>后台内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(path === <span class="hljs-string">&#x27;/jsonp/friends.js&#x27;</span>)&#123;<br>    response.<span class="hljs-property">statusCode</span> = <span class="hljs-number">200</span><br>    response.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;text/javascript;charset=utf-8&#x27;</span>)<br>    <span class="hljs-keyword">const</span> string = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;public/friends.json&#x27;</span>)<br>    <br>    <span class="hljs-comment">// query.cd 获取前端传过来的cd参数的值</span><br>    <span class="hljs-comment">// 将cd的值作为回调函数的名称，进行拼接然后返回</span><br>    response.<span class="hljs-title function_">write</span>(query.<span class="hljs-property">callback</span> + <span class="hljs-string">&#x27;(&#x27;</span> + string + <span class="hljs-string">&#x27;)&#x27;</span>)<br>    response.<span class="hljs-title function_">end</span>()<br> &#125;<br></code></pre></td></tr></table></figure>

<p>后台处理之后&#x2F;jsonp&#x2F;friends.js下的js文件的内容就变成了下面这样，变成了调用这个callback的函数，并且将数据作为参数传入callback中。</p>
<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202206110109038.png" alt="friends.js内容"></p>
<p>callback函数的定义如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">callback</span>(<span class="hljs-params">data</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>控制台输出如下</p>
<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202206110109369.png" alt="控制台输出"></p>
<p>至此，就已经能够在本页面访问到目标页面的数据了。</p>
<p>注意：JSONP的实现需要后端支持</p>
<p>上面的做法有一个缺点，这样设置JSONP之后所有网站都能够拿到这些数据了，如果不想所有网站都能够拿到数据，</p>
<p>这个时候我们需要做出一些限制：</p>
<ol>
<li>使用请求头里面的referer进行匹配</li>
<li>待补充…</li>
</ol>
<h4 id="JSONP优化"><a href="#JSONP优化" class="headerlink" title="JSONP优化"></a>JSONP优化</h4><ol>
<li><p>自定义回调函数名 （上面的示例已经实现）</p>
</li>
<li><p>动态添加删除script标签</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>)<br>script.<span class="hljs-property">src</span> = <span class="hljs-string">`http://localhost:8888/jsonp/friends.js?callback=callback`</span><br>script.<span class="hljs-property">onload</span> = <span class="hljs-function">()=&gt;</span>&#123;<br>	script.<span class="hljs-title function_">remove</span>()<br>&#125;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(script)<br></code></pre></td></tr></table></figure>

<h4 id="JSONP优缺点"><a href="#JSONP优缺点" class="headerlink" title="JSONP优缺点"></a>JSONP优缺点</h4><p>优点：</p>
<ul>
<li>能够在IE下实现跨域</li>
</ul>
<p>缺点：</p>
<ul>
<li>只能得到失败还是成功，无法得到状态码以及响应头等</li>
<li>无法使用post请求，因为script只支持post</li>
</ul>
<h4 id="Promise规范封装JSONP"><a href="#Promise规范封装JSONP" class="headerlink" title="Promise规范封装JSONP"></a>Promise规范封装JSONP</h4><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 封装jsonp</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">jsonp</span>(<span class="hljs-params">url</span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,rejected</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">// 随机生成回调函数名</span><br>	<span class="hljs-keyword">const</span> random = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>();<br>    <span class="hljs-comment">// 回调函数</span><br>    <span class="hljs-variable language_">window</span>[random] = <span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<br>      <span class="hljs-title function_">resolve</span>(data);<br>    &#125;<br>    <span class="hljs-keyword">const</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>)<br>    script.<span class="hljs-property">src</span> = url + <span class="hljs-string">`?callback=`</span> + random;<br>    script.<span class="hljs-property">onload</span> = <span class="hljs-function">()=&gt;</span>&#123;<br>      script.<span class="hljs-title function_">remove</span>()<br>    &#125;<br>    script.<span class="hljs-property">onerror</span> = <span class="hljs-function">()=&gt;</span>&#123;<br>      <span class="hljs-title function_">rejected</span>();<br>    &#125;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(script)<br>  &#125;)<br>&#125;<br><br><span class="hljs-comment">// 调用jsonp</span><br><span class="hljs-title function_">jsonp</span>(<span class="hljs-string">&#x27;http://localhost:8888/jsonp/friends.js&#x27;</span>)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>&#125;,<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;请求失败！&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure>

<p>注意：这种方式封装JSONP需要将回调函数放在window上，否则因为作用域的原因会使得friends.js中的回调函数无法访问到。另外，如果只有一个jsonp请求，可以使用一个回调函数，但是一旦出现了多个jsonp请求，就要使用不同的回调函数了，上面采用了随机数的方式生成回调函数名。</p>
<h2 id="跨域常见问题"><a href="#跨域常见问题" class="headerlink" title="跨域常见问题"></a>跨域常见问题</h2><h4 id="为什么可以使用其他网站上的css、js、和img？"><a href="#为什么可以使用其他网站上的css、js、和img？" class="headerlink" title="为什么可以使用其他网站上的css、js、和img？"></a>为什么可以使用其他网站上的css、js、和img？</h4><p>同源策略限制的是数据访问，在网站中使用js、css、img时是属于引用，不能够获取到其中数据的。</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>CORS</tag>
        <tag>JSONP</tag>
      </tags>
  </entry>
  <entry>
    <title>浅述Promise</title>
    <url>/posts/47308023.html</url>
    <content><![CDATA[<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202206092334626.png"></p>
<h2 id="Promise简介"><a href="#Promise简介" class="headerlink" title="Promise简介"></a>Promise简介</h2><p>Promise是前端解决异步任务的统一方式。<br>从JavaScript的语法上而言：Promise是一个对象，可以从它身上获取异步操作的消息。<br>从Promise的词意上而言：Promise的意思是“承诺”，它承诺过一段时间给你异步任务操作的结果。</p>
<h2 id="Promise状态"><a href="#Promise状态" class="headerlink" title="Promise状态"></a>Promise状态</h2><ul>
<li>pending（等待状态）</li>
<li>fulfiled（成功状态）</li>
<li>rejected（失败状态）</li>
</ul>
<h2 id="Promise特点"><a href="#Promise特点" class="headerlink" title="Promise特点"></a>Promise特点</h2><ol>
<li><p>对象的状态不会受外界的影响，只有异步操作的结果可以决定当前是哪一种状态，其他的操作无法改变这个状态。</p>
</li>
<li><p>一旦状态改变，之后就不会再改变了，任何时候都能够得到这个结果。Promise中的对象状态的改变，只有两种可能：<span class="label label-info">（pending——&gt;&gt;fulfiled）</span>、<span class="label label-info">（pending——&gt;&gt;rejected）</span>一旦这种情况发生了，状态就固定了，不会再改变。</p>
</li>
<li><p>创建了Promise对象之后就会立即执行</p>
</li>
</ol>
<p class="note note-warning">
如果你在状态改变之后给Promise对象添加回调函数，你仍然能够得到这个结果。但如果是事件，你一旦错过了这个事件的触发，你再进行监听就无法得到之前的结果了。
</p>

<h2 id="Promise使用"><a href="#Promise使用" class="headerlink" title="Promise使用"></a>Promise使用</h2><h3 id="创建Promise对象"><a href="#创建Promise对象" class="headerlink" title="创建Promise对象"></a>创建Promise对象</h3><p>我们可以通过<span class="label label-info">new</span>关键字创建一个Promise对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)&#123;<br>	<span class="hljs-comment">// 异步操作</span><br>	<span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>		<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;执行了一些异步操作&#x27;</span>);<br>		<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;拿到的一些数据&#x27;</span>);<br>	&#125;,<span class="hljs-number">2000</span>);<br>&#125;)<br></code></pre></td></tr></table></figure>

<p>执行结果：</p>
<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202206100019947.png"></p>
<p>从上面的执行结果我们就可以看出Promise对象在一创建出来就被立即执行了，所以在使用Promise对象的时候通常会使用一个函数将他包裹起来。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">async</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)&#123;<br>        <span class="hljs-comment">// 异步操作</span><br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;执行了一些异步操作&#x27;</span>);<br>            <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;拿到的一些数据&#x27;</span>);<br>        &#125;,<span class="hljs-number">2000</span>);<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>使用函数包裹并return对象之后，我们在调用async这个函数的时候就会得到一个Promise对象，我们就可以使用Promise对象自身及其原型上的方法了，例如：</p>
<p><span class="label label-info">.resolve()</span>、<span class="label label-info">.reject()</span>、<span class="label label-info">.all()</span>、<span class="label label-info">.race()</span>、<span class="label label-info">.then()</span>、<span class="label label-info">.catch()</span></p>
<p>未完待续…</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>Promise</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器客户端存储</title>
    <url>/posts/b7f743a4.html</url>
    <content><![CDATA[<h2 id="客户端存储"><a href="#客户端存储" class="headerlink" title="客户端存储"></a>客户端存储</h2><p>有时候我们会希望能够将服务器的一些特殊的用户数据存贮在本地，这个时候就需要用到客户端数据存储技术</p>
<h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>Cookie是服务器下发给浏览器的一段字符串，以键值对的形式存储</p>
<h4 id="Cookie的使用"><a href="#Cookie的使用" class="headerlink" title="Cookie的使用"></a>Cookie的使用</h4><p>客户端：</p>
<ul>
<li>写入Cookie</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>=<span class="hljs-string">&quot;key=value;expires=失效时间&quot;</span><br></code></pre></td></tr></table></figure>

<p class="note note-warning">如果未指定expires，浏览器关闭时cookie就失效</p>

<ul>
<li>读取Cookie</li>
</ul>
<p>通过<code>document.cookie</code>进行整体读取，然后再根据<code>;</code>和<code>=</code>进行分割</p>
<p>服务器端：</p>
<ul>
<li>通过Set-Cookie在响应头设置Cookie</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">response.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Set-Cookie&#x27;</span>,<span class="hljs-string">`session_id=111; HttpOnly`</span>);<br></code></pre></td></tr></table></figure>

<p>更多操作见<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Set-Cookie">Set-Cookie MDN文档</a></p>
<h4 id="Cookie优缺点"><a href="#Cookie优缺点" class="headerlink" title="Cookie优缺点"></a>Cookie优缺点</h4><p>Cookie的优点：</p>
<ul>
<li>能够和服务器端交互</li>
<li>浏览器自动管理不同站点的数据，并且能够之后的发起相同二级域名请求中附上cookie</li>
</ul>
<p>Cooke的缺点：</p>
<ul>
<li>安全性差</li>
<li>数据量受限（4KB）</li>
<li>可用性受限</li>
<li>明文存储</li>
</ul>
<h4 id="防止用户篡改cookie"><a href="#防止用户篡改cookie" class="headerlink" title="防止用户篡改cookie"></a>防止用户篡改cookie</h4><p>思路一：</p>
<p>将Cookie进行加密之后再发送给前端，后端读取Cookie解密后再使用但是这种方法有漏洞，加密后的内容可以无限期使用</p>
<p>解决方法：JWT</p>
<p>思路二：</p>
<p>将用户信息放在服务器的文件中，给用户信息碎甲产生一个id，然后将这个id发给前端，后端去文件中读取id对应的用户内容。</p>
<h3 id="WebStorage"><a href="#WebStorage" class="headerlink" title="WebStorage"></a>WebStorage</h3><p>WebStorage是HTML5中引入的本地存储解决方案，可以在客户端本地存储数据<br>由两部分组成：</p>
<ul>
<li>localStorage：在本地永久性存储数据</li>
<li>sessionStorage：存储的数据只会在会话期间有效，关闭浏览器则自动删除</li>
</ul>
<h4 id="WebStorage的使用"><a href="#WebStorage的使用" class="headerlink" title="WebStorage的使用"></a>WebStorage的使用</h4><p>localStorage和sessionStorage的用法相同，常用API如下：</p>
<table>
<thead>
<tr>
<th>方法&#x2F;属性</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><strong>setItem(key,value)</strong></td>
<td>写入数据，添加&#x2F;修改键值对</td>
</tr>
<tr>
<td><strong>getItem(key)</strong></td>
<td>读取数据，根据键读取对应的值，不存在返回空</td>
</tr>
<tr>
<td><strong>removeItem(key)</strong></td>
<td>删除数据，根据键删除对应的键值对</td>
</tr>
<tr>
<td><strong>key(index)</strong></td>
<td>根据索引获取对应的键</td>
</tr>
<tr>
<td><strong>clear()</strong></td>
<td>清空数据</td>
</tr>
<tr>
<td><strong>length</strong></td>
<td>获取键值对数量</td>
</tr>
</tbody></table>
<p class="note note-warning">WebStorage中只能够存储字符串数据，如果要存储对象，则要通过JSON.stringify()序列化然后进行存储</p>

<h4 id="WebStorage的事件监听"><a href="#WebStorage的事件监听" class="headerlink" title="WebStorage的事件监听"></a>WebStorage的事件监听</h4><p>可以对WebStorage进行事件监听，当数据发生变化的时候执行回调函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;storage&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>	<span class="hljs-comment">// 函数体</span><br>&#125;)<br></code></pre></td></tr></table></figure>

<p>StorageEvent事件对象参数：</p>
<ul>
<li>key  发送变化的健名</li>
<li>oldValue  变化之前的值</li>
<li>newValue  变化之后的值</li>
<li>storageArea  发送变化的是localStorage还是sessionStorage</li>
<li>url  引发变化的页面对应的url</li>
</ul>
]]></content>
      <tags>
        <tag>Cookie</tag>
        <tag>WebStorage</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue的完整版和运行时版</title>
    <url>/posts/e983d6cb.html</url>
    <content><![CDATA[<h2 id="Vue的版本"><a href="#Vue的版本" class="headerlink" title="Vue的版本"></a>Vue的版本</h2><ol>
<li>完整版本：vue.js&#x2F;vue.min.js</li>
<li>运行时版本：vue.runtime.js</li>
</ol>
<h3 id="区别一：有无compiler"><a href="#区别一：有无compiler" class="headerlink" title="区别一：有无compiler"></a>区别一：有无compiler</h3><p><code>完整版本 = 运行时版本 + compiler（编译器）</code></p>
<p>完整版本同时包含编译器和运行时的版本，换句话说运行时版本没有编译器这一部分，编译器的作用是将模板字符串编译成为JavaScript渲染函数的代码。</p>
<h3 id="区别二：视图的创建方式"><a href="#区别二：视图的创建方式" class="headerlink" title="区别二：视图的创建方式"></a>区别二：视图的创建方式</h3><p>完整版本可以直接将视图写在HTML或者template中，运行时版本需要在render函数中使用h来进行创建标签。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 有编译器的完整版本写法</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;div&gt;&#123;&#123; hi &#125;&#125;&lt;/div&gt;&#x27;</span><br>&#125;)<br><br><span class="hljs-comment">// 没有编译器的运行时版本的写法</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  render (h) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;div&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">hi</span>)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>

<h3 id="区别三：引入的方式不同"><a href="#区别三：引入的方式不同" class="headerlink" title="区别三：引入的方式不同"></a>区别三：引入的方式不同</h3><h4 id="CDN引入"><a href="#CDN引入" class="headerlink" title="CDN引入"></a>CDN引入</h4><p>完整版的引入：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;......./vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>运行时版本的引入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;......./vue.runtime.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h4 id="webpack引入"><a href="#webpack引入" class="headerlink" title="webpack引入"></a>webpack引入</h4><p>webpack默认使用运行时版本</p>
<p>如果想要使用完整版需要使用alias进行配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">resolve</span>: &#123;<br>    <span class="hljs-attr">alias</span>: &#123;<br>      <span class="hljs-string">&#x27;vue$&#x27;</span>: <span class="hljs-string">&#x27;vue/dist/vue.esm.js&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="vue-x2F-cli引入"><a href="#vue-x2F-cli引入" class="headerlink" title="@vue&#x2F;cli引入"></a>@vue&#x2F;cli引入</h4><p>vue脚手架也是默认使用运行时版本</p>
<p>如果需要使用完整版则要进行额外的配置，具体步骤读者可自行搜索。</p>
<h2 id="简述Vue-Loader"><a href="#简述Vue-Loader" class="headerlink" title="简述Vue Loader"></a>简述Vue Loader</h2><p>有时候我们期望能够既能够使用到运行时版本的体积又能够使用编译器，这个时候我们就可以借助webpack的loader，在打包编译的时候就将模板字符串翻译成js代码，在最终打包好的包中就只需要使用运行时版本即可，这就是Vue loader所做的工作，Vue loader使用了一种单文件组件的方式来进行编译模板字符串</p>
<p>单文件组件：<strong>xxx.vue</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;example&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data () &#123;<br>    return &#123;<br>      msg: &#x27;Hello world!&#x27;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.example &#123;<br>  color: red;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue的模板语法</title>
    <url>/posts/77afcb1e.html</url>
    <content><![CDATA[<h2 id="插值语法"><a href="#插值语法" class="headerlink" title="插值语法"></a>插值语法</h2><p>功能：用于解析标签体内容</p>
<p>写法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>插值语法<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>你好，&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-comment">&lt;!--使用&#123;&#123;js表达式&#125;&#125;的形式引入js表达式--&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="指令语法"><a href="#指令语法" class="headerlink" title="指令语法"></a>指令语法</h2><p>功能：用于解析标签（包括：标签属性、标签体内容、绑定事件……）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">:x</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span>点我去百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 加了v-bind后Vue会将属性后面的内容变成js表达式去执行</span><br><span class="hljs-comment">	v-bind可以给标签中任意的属性去绑定值</span><br><span class="hljs-comment">	可以简写为 &quot;:&quot;</span><br><span class="hljs-comment">--&gt;</span><br></code></pre></td></tr></table></figure>

<p>备注：Vue中有很多的指令，且形式都是 v-??? ,此处用v-bind举个例子</p>
<h3 id="常见指令语法"><a href="#常见指令语法" class="headerlink" title="常见指令语法"></a>常见指令语法</h3><h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><p>作用：用于给元素绑定事件</p>
<p>用法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;clickFunction&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>简写形式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;clickFunction&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><p>作用：单向数据绑定，数据从data流向页面</p>
<p>用法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>简写形式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><p>作用：双向数据绑定，数据既能从data流向页面，又能从页面流向data</p>
<p>用法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model:value</span>=<span class="hljs-string">&#x27;inputvalue&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>简写形式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;inputvalue&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p class="note note-warning">
注意：v-model一般只用在表单元素上
</p>

<h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><p>作用：进行数据的遍历，遍历的可以是数组、对象、数字</p>
<p>用法：</p>
<p>数组：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in data&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>对象：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value,key) in data&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>数字：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(number,index) in 10&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p class="note note-warning">
注意：v-for通常要和 :key 属性一起使用
</p>

<h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><p>作用：条件渲染，通过v-show能够控制元素的显示或者隐藏（元素不会在Dom结构中消失）</p>
<p>用法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isshow === true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!--v-show的值通常是个逻辑值--&gt;</span><br></code></pre></td></tr></table></figure>

<h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><p>作用：同v-show一样都是条件渲染，通过v-if能够控制元素的显示或者隐藏（元素会直接从Dom结构中消失）</p>
<p>用法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isshow === true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h4 id="v-else-x2F-v-else-if"><a href="#v-else-x2F-v-else-if" class="headerlink" title="v-else&#x2F;v-else-if"></a>v-else&#x2F;v-else-if</h4><p>作用：v-else和v-else-if跟JavaScript中的分支结构功能相同，在v-if不成立的时候会一次检查v-else-if，都不成立执行v-else</p>
<p>用法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;n==1&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;n==2&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;n==3&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;n==4&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p class="note note-warning">
注意：v-if、v-else-if、v-else 一起使用时，结构不能被“打断”，例如下面这样：
</p>

<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;n==1&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;n==2&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- v-if和v-else被打断了: --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>@<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;n==3&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;n==4&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><p>作用：用于将数据填充到标签中，作用相当于插值语法</p>
<p>用法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;tagValue&quot;</span>&gt;</span>123123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p class="note note-warning">
注意：<br>
1、v-text会把原本的内容为完全的替换掉<br>
2、v-text不能解析HTML标签
</p>

<h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><p>作用：同上面的v-text的作用相同</p>
<p>用法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;tagValue&quot;</span>&gt;</span>123123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p class="note note-warning">
不同之处：v-html能够解析HTML标签<br>
相同之处：v-html也会把原本的内容为完全的替换掉<br>
注意：v-html有安全性问题，尽量不要使用v-html
</p>

<h4 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h4><p>作用：vue实例创建完毕并接管容器后，会删除掉v-cloak属性</p>
<p>用法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-attr">[v-cloak]</span> &#123;</span><br><span class="language-css">    	<span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-cloak</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p class="note note-info">
v-cloak可以配合css可以解决网速慢时，页面展示出插值语法的问题，如上
</p>

<h4 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h4><p>作用：v-once在初次动态渲染之后，就是为静态内容，以后的数据都不会引起v-once所在结构的改变，可以用于优化性能</p>
<p>用法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-once</span>&gt;</span>初始化时候的n是:&#123;&#123;n&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h4 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h4><p>作用：Vue会跳过v-pre属性所在节点的编译过程，可以利用它跳过没有使用指令语法、插值语法的节点，能够加快编译速度</p>
<p>用法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-pre</span>&gt;</span>没有使用指令语法和插值语法<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-pre</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中el和data的两种写法</title>
    <url>/posts/ded27652.html</url>
    <content><![CDATA[<h2 id="el和data的两种写法"><a href="#el和data的两种写法" class="headerlink" title="el和data的两种写法"></a>el和data的两种写法</h2><p>el的第一种写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,<span class="hljs-comment">// el第一种写法</span><br>    <span class="hljs-attr">data</span>:&#123;     <br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>

<p>el的第二种写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> v = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>	<span class="hljs-attr">data</span>:&#123;<br>		&#125;<br>&#125;);  <br><span class="hljs-comment">// 为实例对象指定容器</span><br>v.$mount(<span class="hljs-string">&#x27;#root&#x27;</span>);  <span class="hljs-comment">// el第二种写法</span><br></code></pre></td></tr></table></figure>

<p>data的第一种写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,<br>    <span class="hljs-comment">// data的第一种写法：对象式</span><br>    <span class="hljs-attr">data</span>:&#123;<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;哈哈哈&#x27;</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>

<p>data的第二种写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,<br>    <span class="hljs-comment">// 对象的第二种写法：函数式</span><br>    <span class="hljs-comment">// 组件必须要用函数式</span><br>    <span class="hljs-attr">data</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">// 可以简写成 data()&#123;&#125;</span><br>        <span class="hljs-comment">// 此处的 this 是 Vue实例对象</span><br>        <span class="hljs-comment">// 此处不能写成箭头函数 data:()=&gt;&#123;&#125; 箭头函数没有自己的this 所以箭头函数的this是window</span><br>        <span class="hljs-keyword">return</span>&#123;<br>            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;哈哈哈&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>

<p class="note note-warning">
注意：由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是vue实例了
</p>

]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.extend和Vue.component</title>
    <url>/posts/dc0432fa.html</url>
    <content><![CDATA[<h2 id="Vue-extend"><a href="#Vue-extend" class="headerlink" title="Vue.extend"></a>Vue.extend</h2><p>Vue.extend能够接收options组件构造选项，然后使用Vue构造器创建并返回一个构造函数，这个构造函数可以看作是从Vue继承而来的一个子类。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Profile</span> = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">extend</span>(&#123;<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;p&gt;&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125; aka &#123;&#123;alias&#125;&#125;&lt;/p&gt;&#x27;</span>,<br>  <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Walter&#x27;</span>,<br>      <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;White&#x27;</span>,<br>      <span class="hljs-attr">alias</span>: <span class="hljs-string">&#x27;Heisenberg&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>

<p>我们将返回值打印出来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(<span class="hljs-title class_">Profile</span>)<br></code></pre></td></tr></table></figure>

<p>可以看到一个名叫VueComponent的函数，换句话说这个构造函数的本质，其实是Vue.extend生成的一个名叫VueComponent的函数</p>
<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202207062114436.png" alt="VueComponent构造函数"></p>
<p>我们可以通过<code>new</code>关键字创建这个Profile这个类的实例，并且我们可以将其打印出来看看他是什么东西</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> profile = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Profile</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(profile)<br></code></pre></td></tr></table></figure>

<p>我们可以发现这个实例对象的类型是VueComponent，并且他身上的属性和Vue实例对象身上的属性很相似</p>
<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202207062114832.png" alt="VueComponent实例对象"></p>
<p>通过上面的分析，我们已经能够理解Vue.extend的作用，他实际上就是通过你传递的options，给你产生一个Vue组件的构造函数，你可通过这个组件的构造函数去创建你需要的组件实例对象。</p>
<p>通过Vue.extend产生的组件并不能够直接使用，它只是按照你的opitons去定义了一个组件，要真正的使用组件我们还需要对组件进行注册，通过注册之后在能够在Vue实例中或者其他实例中通过<code>&lt;组件名&gt;&lt;/组件名&gt;</code>使用组件</p>
<p>注册组件的方式：</p>
<ol>
<li><p>局部注册</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,<br>    <span class="hljs-comment">// 注册组件（局部注册）</span><br>    <span class="hljs-attr">components</span>:&#123;<br>        <span class="hljs-attr">profile</span>:<span class="hljs-title class_">Profile</span>, <span class="hljs-comment">// 此处的Profile是Vue.extend的返回值</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>
</li>
<li><p>全局注册</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;profile&#x27;</span>,<span class="hljs-title class_">Profile</span>) <br><span class="hljs-comment">// 此处的Profile是Vue.extend的返回值</span><br></code></pre></td></tr></table></figure></li>
</ol>
<p>Vue.extend简写方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> vc = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">extend</span>(options)  <br><span class="hljs-comment">// 可简写为: </span><br><span class="hljs-keyword">const</span> vc = &#123; <span class="hljs-comment">// options</span><br>    <span class="hljs-attr">data</span>:...,<br>    ....<br>&#125;<br></code></pre></td></tr></table></figure>

<p class="note note-warning">
注意：<br>
1、我们只需要在实例对象或者其他组件中创建"<组件名></组件名>"标签，Vue解析器就会帮我们创建对应的组件的实例对象，即帮我执行 new VueComponent(options)<br>
2、每次调用Vue.extend，返回的都是一个全新的VueComponent
</p>

<h2 id="Vue-component"><a href="#Vue-component" class="headerlink" title="Vue.component"></a>Vue.component</h2><p>Vue.component在上面已经提及到了一部分，他用来注册或者获取全局组件，注册能够为组件指定<code>id</code>（即组件的名称）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 注册组件，传入一个扩展过的构造器</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;my-component&#x27;</span>, <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">extend</span>(&#123; <span class="hljs-comment">/* ... */</span> &#125;))<br><br><span class="hljs-comment">// 注册组件，传入一个选项对象 (自动调用 Vue.extend)</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;my-component&#x27;</span>, &#123; <span class="hljs-comment">/* ... */</span> &#125;)<br><br><span class="hljs-comment">// 获取注册的组件 (始终返回构造器)</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">MyComponent</span> = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;my-component&#x27;</span>)<br></code></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>结合上面对Vue.extend和vue.component的分析我们能够了解到，extend和component的作用基本上是相同的，区别在于你需不需要给所需要创建的组件构造函数一个名字，但实际上在调用Vue.component的时候，他会默认在背后调用Vue.extend</p>
]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue生命周期钩子</title>
    <url>/posts/e814137e.html</url>
    <content><![CDATA[<h2 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h2><p>在了解Vue生命周期钩子之前，我们先要了解一下什么是钩子函数，假设现在有一个产品，他每次运行都要经历如下的几个阶段：初始视图、初始化数据、处理数据、展示数据、结束。突然有一天出现了一个需求，要求我们在数据初始化之前的这个时刻和处理数据之后的这个时刻，我们要增加一些业务逻辑，这个时候我们最坏的方法就是去将之前程序的那两处地方加上我们想要的逻辑，但是如果这个业务逻辑是时常改变的，那每一次耗费的精力就会很多，这个时候我们为了解决这种情况的出现，我们可以在对应的阶段都埋下一些钩子函数，在运行到对应的阶段时，钩子函数就会自动的被调用，从而把我们新增的业务逻辑勾入到对应的运行阶段中，这样我们每次需要做的只是改变钩子函数中的业务逻辑，大大的提高了开发的效率。</p>
<h2 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h2><p>通过上面对钩子函数的解释，我们就能明白Vue的生命周期钩子，也就是Vue在某些特定的时刻帮我调用的一些特殊名称的函数</p>
<p class="note note-warning">
注意：<br>
1、Vue生命周期函数的名字是不可更改的，但具体内容是由开发人员根据需求进行编写的<br>
2、生命周期函数中的this指向是指向vm（Vue实例对象）或者（vc）组件实例对象
</p>

<p>Vue生命周期图示如下：</p>
<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202207070952048.png" alt="生命周期"></p>
<h2 id="Vue的八个生命周期钩子"><a href="#Vue的八个生命周期钩子" class="headerlink" title="Vue的八个生命周期钩子"></a>Vue的八个生命周期钩子</h2><h3 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate()"></a>beforeCreate()</h3><p>在初始化实例之后调用的第一个钩子，this仍然是vm，但是这里的vm是没有进行数据代理的，也就是data中的数据是没有被传入到_data中的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    ...<br>    <span class="hljs-title function_">beforeCreate</span>(<span class="hljs-params"></span>)&#123;<br>    ...<br>    &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure>

<h3 id="created"><a href="#created" class="headerlink" title="created()"></a>created()</h3><p>在这个阶段实例已经完成了数据处理，computed、methods、watch、data中的数据都能够被访问到，但此时还不能访问页面中的Dom元素，因为此时Vue还没有开始解析模板，生成虚拟Dom</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    ...<br>    <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>)&#123;<br>    ...<br>    &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure>

<h3 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount()"></a>beforeMount()</h3><p>在这个阶段，Vue已经解析完了模板，并且生成了虚拟Dom，但是还未将虚拟Dom转化成真实Dom，也就是说此时的页面还是未经Vue编译的Dom结构，此时对页面Dom的操作最终都不会生效</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    ...<br>    <span class="hljs-title function_">beforeMount</span>(<span class="hljs-params"></span>)&#123;<br>    ...<br>    &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure>

<h3 id="mounted"><a href="#mounted" class="headerlink" title="mounted()"></a>mounted()</h3><p>在这个阶段，Vue已经完成了页面Dom的编译，虚拟Dom已经转换成了真实Dom，这时对Dom的操作都是有效的（但官方不建议直接操作Dom元素），初始化阶段至此全部结束，在此还能够进行：定时器开启、发送网络请求、订阅消息、绑定自定义事件等操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    ...<br>    <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123;<br>    ...<br>    &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure>

<h3 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate()"></a>beforeUpdate()</h3><p>当实例中数据发生变化的时候就会调用beforeUpdate()函数，这个时候只是实例中的数据变化了，页面的数据还没有进行刷新，即数据是新的，页面是旧的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    ...<br>    <span class="hljs-title function_">beforeUpdate</span>(<span class="hljs-params"></span>)&#123;<br>    ...<br>    &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure>

<h3 id="updated"><a href="#updated" class="headerlink" title="updated()"></a>updated()</h3><p>在这个阶段，页面已经跟随着数据进行了同步更新，即数据是新的页面也是新的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    ...<br>    <span class="hljs-title function_">updated</span>(<span class="hljs-params"></span>)&#123;<br>    ...<br>    &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure>

<h3 id="beforeDestroy"><a href="#beforeDestroy" class="headerlink" title="beforeDestroy()"></a>beforeDestroy()</h3><p>此时马上要执行销毁过程了，但所有的data、methods和指令都是可以用的，但是此时对数据的修改已经不会触发更新了，在此可以执行必要的清理，例如：关闭定时器、取消订阅消息、解绑自定义事件等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    ...<br>    <span class="hljs-title function_">beforeDestroy</span>(<span class="hljs-params"></span>)&#123;<br>    ...<br>    &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure>

<h3 id="destroyed"><a href="#destroyed" class="headerlink" title="destroyed()"></a>destroyed()</h3><p>在Vue实例被销毁后调用，此时所有指令都已经解绑、事件监听都已经删除、所有子实例也已经被销毁。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    ...<br>    <span class="hljs-title function_">destroyed</span>(<span class="hljs-params"></span>)&#123;<br>    ...<br>    &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure>

<h2 id="常用的4个生命周期钩子"><a href="#常用的4个生命周期钩子" class="headerlink" title="常用的4个生命周期钩子"></a>常用的4个生命周期钩子</h2><ul>
<li>created()</li>
<li>mounted()</li>
<li>updated()</li>
<li>destroyed()</li>
</ul>
]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue的响应式数据和数据代理</title>
    <url>/posts/7d138b6c.html</url>
    <content><![CDATA[<h2 id="Vue的响应式数据"><a href="#Vue的响应式数据" class="headerlink" title="Vue的响应式数据"></a>Vue的响应式数据</h2><p>在介绍Vue的数据代理之前，我们先来看一下Vue的响应式数据带来的效果是什么。在Vue中，如果我们在data中放置了数据，并且将其展示到页面中。</p>
<p>例如像下面这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Vue的数据代理<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        姓名：&#123;&#123;username&#125;&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        性别：&#123;&#123;usersex&#125;&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        工资：&#123;&#123;wage&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;App&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">username</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">usersex</span>:<span class="hljs-string">&#x27;男&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">wage</span>:<span class="hljs-number">1000</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>如果我们对data中的数据进行改动（这里我直接借助Vue开发者工具插件进行修改，实际上methods等方法修改效果也是一样），页面上的数据也会随之改变。</p>
<p>效果如图：</p>
<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202207071731078.gif" alt="响应式数据"></p>
<p>从上面我们可以看出，只要data中的数据改变了Vue就能够很智能的去修改页面上的对应的数据，他实际上就是去监听data中数据的每一次改变，只要data中的数据改变了，就去重新渲染页面，这样新的数据也就被展示到了页面中，这样就能够使得页面能够根据数据的改变而改变。</p>
<h2 id="Vue对数据做了什么？"><a href="#Vue对数据做了什么？" class="headerlink" title="Vue对数据做了什么？"></a>Vue对数据做了什么？</h2><p>由于Vue对数据做了一些了的特殊的处理，使得普通的数据能够变成响应式的数据，我们可以对比一下数据经过Vue处理的前后数据有什么不同，从而观察一下Vue究竟做了什么处理。</p>
<p>我们创建一个对象，并将其打印出来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myObj = &#123;<br>    <span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<br>    <span class="hljs-attr">b</span>:<span class="hljs-number">2</span>,<br>    <span class="hljs-attr">c</span>:<span class="hljs-number">3</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myObj);<br></code></pre></td></tr></table></figure>

<p>打印结果如下：</p>
<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202207071817982.png" alt="未经过Vue处理的数据"></p>
<p>我们将创建的对象数据放在Vue实例的data中，然后将其打印出来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myObj = &#123;<br>    <span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<br>    <span class="hljs-attr">b</span>:<span class="hljs-number">2</span>,<br>    <span class="hljs-attr">c</span>:<span class="hljs-number">3</span><br>&#125;<br><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;App&#x27;</span>,<br>    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            myObj,<br>        &#125;<br>    &#125;<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myObj);<br></code></pre></td></tr></table></figure>

<p>打印结果如下：</p>
<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202207071817696.png" alt="经过Vue处理过的数据"></p>
<p>通过对比我们能够看到同样的数据经过处理之后，对象数据的值变成了<code>(...)</code>并且还多了很多<code>get/set 属性名</code>的函数，这也就是Vue对数据所做的处理。</p>
<h2 id="getter和setter"><a href="#getter和setter" class="headerlink" title="getter和setter"></a>getter和setter</h2><p>想要看懂上面的数据被做了哪些处理，我们需要了解一些额外的知识，首先我们要了解什么是getter和setter。</p>
<p>getter和setter我们可以简单理解为是为了防止用户直接操作数据，而提供的两个方法，通过getter我们能够直接获取到数据的值，通过setter我们能够修改数据的值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;<br>	<span class="hljs-attr">num</span>:<span class="hljs-number">123</span>,<br>	<span class="hljs-title function_">getter</span>(<span class="hljs-params"></span>)&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span><br>	&#125;,<br>	<span class="hljs-title function_">setter</span>(<span class="hljs-params">value</span>)&#123;<br>		<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span><br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="ES6中的getter和setter"><a href="#ES6中的getter和setter" class="headerlink" title="ES6中的getter和setter"></a>ES6中的getter和setter</h2><p>了解了getter和setter是什么之后，我们来看一下在ES6中提供给我们的getter和setter的语法是怎样的。</p>
<p>在ES6中我们要使用getter和setter的时候要使用<code>get</code>、<code>set</code>关键字，示例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">num</span>: <span class="hljs-number">7</span>,<br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">getNum</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span>;<br>    &#125;,<br>    <span class="hljs-keyword">set</span> <span class="hljs-title function_">setNum</span>(<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span> = value / <span class="hljs-number">2</span><br>    &#125;<br>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj);<br><br><span class="hljs-comment">// getter的使用：能够直接使用obj.getNum调用getNum方法去获取num的值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;getter获取num的值为：&#x27;</span> + obj.<span class="hljs-property">getNum</span>);<br><br><span class="hljs-comment">// setter的使用：能够使用obj.setNum设置num的值</span><br>obj.<span class="hljs-property">setNum</span> = <span class="hljs-number">40</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;setter设置num的值为：&#x27;</span> + obj.<span class="hljs-property">getNum</span>);<br></code></pre></td></tr></table></figure>

<p>控制台输出：</p>
<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202207072113797.png" alt="控制台内容"></p>
<p>我们可以看到，使用了get和set关键字后，obj对象发生了一些变化，变得和我们前面Vue处理过的数据有点相似，同样拥有get和set的函数，并且我们能够看到还新增了<code>getNum</code>这个属性，并且这个属性的值是<code>(...)</code>，这是实际上是因为，这个属性的值浏览器是不知道的，他的值是需要去其他地方获取，或者通过一些其他方式产生的。</p>
<h2 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h2><p>介绍了上面的getter和setter之后，想必大家会有一个疑问，在之前的Vue对象中，data中的每一个属性值都有自己的getter和setter，并且data中不会有任何的多余的新增属性。而上面的get和set关键字虽然能够产生getter和setter函数，但是和已有的属性联系却不是那么的紧密。</p>
<p>这个时候就需要介绍一下Object.defineProperty()这个方法了，他能够在指定对象身上新增一个属性，并且能够为其绑定getter和setter方法</p>
<p>示例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> number = <span class="hljs-number">18</span>; <span class="hljs-comment">// 用来真正存放age的值</span><br><span class="hljs-keyword">let</span> person = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,<br>    <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>,<br>&#125;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(person,<span class="hljs-string">&#x27;age&#x27;</span>,&#123;<br>    <span class="hljs-attr">enumerable</span>:<span class="hljs-literal">true</span>,  <span class="hljs-comment">// 控制属性是否可以枚举，默认值是false</span><br>    <span class="hljs-comment">// writable:true,  // 控制属性值是否可以被修改，默认值是false</span><br>    <span class="hljs-comment">// configurable:true,  //控制属性是否可以被删除，默认值是false</span><br>    <span class="hljs-attr">get</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;有人读取了age属性的值&#x27;</span>);<br>        <span class="hljs-keyword">return</span> number<br>    &#125;,<br>    <span class="hljs-attr">set</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;有人修改了age，且值是&#x27;</span>+value);<br>        number = value;<br>    &#125;<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person);<br></code></pre></td></tr></table></figure>

<p>控制台输出：</p>
<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202207072112089.png" alt="输出person对象"></p>
<p>从输出的内容我们可以看出，Object.defineProperty()方法为我们在person中增加了一个age属性，并且为age属性绑定了getter和setter方法，其实到这个时候我们已经能够发现这个对象数据经过Object.defineProperty()处理之后跟Vue处理后的数据的已经很相似了。</p>
<p>在我们对age属性进行读取或者更改的时候</p>
<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202207072110787.png" alt="读写person中的age属性"></p>
<p>它就会调用对应getter和setter方法，我们可以在此对属性进行监听，随后我们只需要在数据改变的时候对页面进行重新渲染，就能够得到类似于Vue的响应式数据了。</p>
<h2 id="Vue的数据代理"><a href="#Vue的数据代理" class="headerlink" title="Vue的数据代理"></a>Vue的数据代理</h2><p>上面我们讲完了数据的响应式，我们回过头继续研究vm实例对象本身，下面这张图是在控制台打印出的vm实例对象，我们不难发现，在它的身上，我们放置在data上的myObj对象数据已经它对应的getter和setter，不只出现了一次。</p>
<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202207072128027.png" alt="vm实例对象"></p>
<p>这是因为Vue做了数据代理，Vue将data中的数据放在了实例自身的<code>_data</code>上，然后将<code>_data</code>上的数据通过Object.defineProperty()方法代理到vm自身上，这样vm就出现了<code>_date</code>上的属性，并且可以通过操作vm身上的属性来操作<code>_data</code>中的的数据，</p>
<p>过程如下图所示：</p>
<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202207072135020.png" alt="Vue数据代理图示"></p>
<p>这样进行数据代理的好处是：</p>
<p>vm能够更方便的操作data中的数据。</p>
<h3 id="实现一个数据代理"><a href="#实现一个数据代理" class="headerlink" title="实现一个数据代理"></a>实现一个数据代理</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 准备一些数据</span><br><span class="hljs-keyword">let</span> data = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">14</span>,<br>    <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span><br>&#125;<br><br><span class="hljs-comment">// 代理</span><br><span class="hljs-keyword">let</span> proxy = <span class="hljs-title function_">dataProxy</span>(&#123;<span class="hljs-attr">data</span>:data&#125;) <br><span class="hljs-comment">// ES6可以简写成dataProxy(&#123;data&#125;)</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">dataProxy</span>(<span class="hljs-params">&#123;data&#125;</span>)&#123;<br>    <span class="hljs-keyword">const</span> proxy = &#123;&#125;<br>    <span class="hljs-keyword">for</span>(key <span class="hljs-keyword">in</span> data)&#123;<br>        <span class="hljs-keyword">let</span> temp = data[key]<br>        <span class="hljs-comment">// 这里要注意不能直接使用data[key]不然会重复触发get函数</span><br>        <span class="hljs-comment">// 后会导致爆栈</span><br>        <br>        <span class="hljs-comment">// 这一部分是为了操作原本的data也能够被监听到</span><br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(data,key,&#123;<br>            <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-keyword">return</span> temp<br>            &#125;,<br>            <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>)&#123;<br>                temp = value<br>            &#125;<br>        &#125;)<br>        <br>        <span class="hljs-comment">// 这里是使用proxy对data进行数据代理</span><br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(proxy,key,&#123;<br>            <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-keyword">return</span> temp<br>            &#125;,<br>            <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>)&#123;<br>                temp = value<br>            &#125;<br>        &#125;)<br>    &#125;<br>    <br>    <span class="hljs-comment">// 返回代理对象</span><br>    <span class="hljs-keyword">return</span> proxy<br>&#125;<br></code></pre></td></tr></table></figure>

<p>通过控制台输出我们可以看到，原本的data属性已经全部拥有了getter和setter方法，并且proxy也获取到了data身上的全部属性以及方法</p>
<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202207072236510.png" alt="打印data对象和proxy对象"></p>
<p>我们测试一下proxy能否代理data身上的属性，我们直接修改proxy身上的age属性，这是我们可以发现data上的age属性也相应产生了改变，证明proxy已经成功的完成了对data的数据代理</p>
<p><img src="https://images-1257631716.cos.ap-shanghai.myqcloud.com/hexo/img/202207072236286.png" alt="测试proxy能否对data进行数据代理"></p>
<p>🆗 至此对响应式数据和数据代理的分析就结束了，感谢阅读！</p>
]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
</search>
